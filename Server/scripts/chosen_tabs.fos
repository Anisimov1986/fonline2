// Author: cvet
// Server and client stuff for radio
#include "_macros.fos"
#include "_client_defines.fos"

#include "_msgstr.fos"
#include "sprite.fos"

#define YOUR_TURN_BLINK_TIME    ( 550 )  // in ms
#define RADIATION_DEATH         ( 1800 ) // from radiation.fos
import int GUI_GetActiveMainScreen() from "client_gui";
import int GUI_GetActiveScreen() from "client_gui";
import int GetIniValue( string& iniKey, int defaultValue ) from "ini_parser";
import int[] @ GetIniValues2( string & iniKey, int[] @ defaultValues ) from "ini_parser";

Sprite TabPic;
int[]  Position;
int    StepX;
int    StepY;
bool   LevelUp;
int    CurTab;

void InitChosenTabs() // Export
{
    TabPic.LoadByIni( "ChosenTabPic", PT_ART_INTRFACE );
    Position = GetIniValues2( "ChosenTab", null );
    StepX = GetIniValue( "ChosenTabStepX", 0 );
    StepY = GetIniValue( "ChosenTabStepY", 5 );
    if( StepX != 0 )
        StepX += TabPic.Width;
    if( StepY != 0 )
        StepY += TabPic.Height;
    LevelUp = false;
    CurTab = 0;
}

void SetChosenTabLevelUp( bool enable ) // Export
{
    LevelUp = enable;
}

void DrawChosenTabs() // Export
{
    if( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME )
        return;

    CritterCl@ chosen = GetChosen();
    if( not valid( chosen ) )
        return;

    if( LevelUp && ( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME ||
                     GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER || GUI_GetActiveScreen() == CLIENT_SCREEN_PERK ) )
        LevelUp = false;

    CurTab = 0;
    if( __Aim != HIT_LOCATION_UNCALLED )
        DrawTab( GetMsgStr( TEXTMSG_GAME, AIM_NAMES( __Aim ) ), COLOR_DGREEN );

    if( chosen.Mode[ MODE_HIDE ] != 0 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_HIDEMODE_TITLE ), COLOR_DGREEN );

    if( LevelUp )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_LEVELUP_TITLE ), COLOR_DGREEN );

    if( __News )
        DrawTab( ( GetMsgStr( TEXTMSG_TEXT, 99997 ) ), COLOR_DGREEN, ( GetMsgStr( TEXTMSG_TEXT, 99998 ) ) );
        
    if(__NewChatMessages)
        DrawTab( ( GetMsgStr( TEXTMSG_TEXT, 72100 ) ), COLOR_DGREEN, ( GetMsgStr( TEXTMSG_TEXT, 72101 ) ) );

    if( chosen.IsOverweight() )
    {
        string ex = "";
        int    overweight = CWBASE_TO_INVVAL( chosen.ItemsWeight() ) - CWBASE_TO_INVVAL( chosen.Stat[ ST_CARRY_WEIGHT ] );
        if( overweight < 1 )
            overweight = 1;
        ex = ( GetMsgStr( TEXTMSG_GAME, STR_OVERWEIGHT_TITLE ) + " " + CWBASE_TO_INVVAL( chosen.ItemsWeight() ) + "/" + CWBASE_TO_INVVAL( chosen.Stat[ ST_CARRY_WEIGHT ] ) );
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_OVERWEIGHT_TITLE ) + " " + overweight + " " +  GetMsgStr( TEXTMSG_TEXT, 3706 ), COLOR_DRED, ex );

    }


    if( chosen.Damage[ DAMAGE_POISONED ] != 0 )
    {
        string@ ex = "";
        uint    color = COLOR_DRED, percent = 0;

        if( ( percent = chosen.Stat[ ST_POISONING_LEVEL ] ) > 0 )
        {

            ex = GetMsgStr( TEXTMSG_GAME, STR_POSON_LEVEL ) + "" + percent;
            percent = ( percent * 100 ) / 2000;
            if( percent == 0 )
                percent = 1;
            color = PercentColor( percent );
            DrawTab( GetMsgStr( TEXTMSG_GAME, STR_POISONED_TITLE ) + " " + percent + "%", color, ex );
        }
    }

    if( chosen.Damage[ DAMAGE_RADIATED ] != 0 )
    {
        string ex = "";
        uint   color = COLOR_DRED, percent = 0;

        if( ( percent = chosen.Stat[ ST_RADIATION_LEVEL ] ) > 0 )
        {
            ex = GetMsgStr( TEXTMSG_GAME, STR_RADIATION_LEVEL ) + "" + percent;
            percent = ( percent * 100 ) / RADIATION_DEATH;
            if( percent == 0 )
                percent = 1;
            color = PercentColor( percent );
            DrawTab( GetMsgStr( TEXTMSG_GAME, STR_RADIATED_TITLE ) + " " + percent + "%", color, ex );
        }
    }

    if( chosen.IsInjured() )
    {
        string ex = "";

        for( uint d = DAMAGE_EYE; d <= DAMAGE_LEFT_LEG; d++ )
        {
            if( chosen.Damage[ d ] > 0 )
                ex += GetMsgStr( TEXTMSG_GAME, 100000 + ( d * 10 ) + 1 ) + "\n";
        }

        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_INJURED_TITLE ), COLOR_DRED, ex );
    }

    if( chosen.IsAddicted() )
    {
        string ex = "";

        for( uint a = ADDICTION_BEGIN; a <= ADDICTION_END; a++ )
        {
            if( chosen.Addiction[ a ] > 0 )
                ex += GetMsgStr( TEXTMSG_GAME, 100000 + ( a * 10 ) + 1 ) + "\n";
        }

        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_ADDICTED_TITLE ), COLOR_DRED, ex );
    }

    if( chosen.Timeout[ TO_TRANSFER ] > 0 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_TIMEOUT_TITLE ), chosen.Timeout[ TO_TRANSFER ] / 1000, COLOR_DRED );

    if( IsTurnBased() && chosen.IsTurnBasedTurn() )
    {
        bool blink = GetTurnBasedTime() % 1000 > ( 1000 - YOUR_TURN_BLINK_TIME );
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_YOU_TURN_TITLE ), GetTurnBasedTime() / 1000 + 1, blink ? COLOR_GREEN : COLOR_DDGREEN );
    }

    if( IsTurnBased() && !chosen.IsTurnBasedTurn() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_TURN_BASED_TITLE ), COLOR_DGREEN );
		
    if( chosen.Param[ SIMULATION ] != 0 )
        DrawTab( "SIMULATION" , COLOR_SIM_STUFF );
}

void DrawTab( string@ text, uint color, string@ onText = null, uint onColor = 0 )
{
    int x1 = Position[ 0 ] + CurTab * StepX, y1 = Position[ 1 ] + CurTab * StepY,
        x2 = x1 + TabPic.Width,            y2 = y1 + TabPic.Height;

    TabPic.Draw( x1, y1 );
    DrawText( valid( text ) ? text : "", x1, y1, x2 - x1, y2 - y1, color, FONT_FALLOUT, FT_CENTERXY );

    if( valid( onText ) && onText.length() > 0 &&
        GetCurrentCursor() == CURSOR_DEFAULT &&                                    // avoid crap on screen durring battle
        ( __MouseX > x1 && __MouseX < x2 ) && ( __MouseY > y1 && __MouseY < y2 ) ) // sic! don't use <= / >=
    {
        int w = 0, h = 0, l = 0;
        GetTextInfo( onText, 0, 0, FONT_FALLOUT, FT_BORDERED, w, h, l );
        DrawText( onText, __MouseX + 30, __MouseY + 18, w, h, onColor, FONT_FALLOUT, FT_BORDERED );
    }

    CurTab++;

}

void DrawTab( string@ text, int value, uint color )
{
    text = ReplaceText( text, "VALUE", value );
    TabPic.Draw( Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY );
    DrawText( text, Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}

uint PercentColor( uint percent, bool clamp = true )
{
    if( !clamp || ( clamp && percent < 100 ) )
        return ( COLOR_RGB( ( 0xFF * percent ) / 100, ( 0xFF * ( 100 - percent ) ) / 100, 0 ) );
    else
        return ( COLOR_RGB( 0xFF, 0, 0 ) );
}
