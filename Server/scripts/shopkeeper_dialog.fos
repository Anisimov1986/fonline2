#define _ADK_SK_AUCTION	# (i)		("SK" +i+ "AUCTION")
void r_SetSupplier(Critter& player, Critter@ npc, int days)
{
	if(!valid(npc))
		return;
		
	Shopkeeper shopkeeper(npc);
	shopkeeper.SetSupplier(player.Id, __FullSecond + REAL_DAY(days));
}

void r_AddSupplyDays(Critter& player, Critter@ npc, int days)
{
	if(!valid(npc))
		return;
		
	Shopkeeper shopkeeper(npc);
	if(!shopkeeper.IsSupplier(player))
		return;
		
	shopkeeper.SetSupplier(player.Id, shopkeeper.GetSupplyEndTime() + REAL_DAY(days));
}

void r_StartAuction(Critter& player, Critter@ npc)
{
	if(!valid(npc))
		return;
		
	Shopkeeper shopkeeper(npc);
	if(shopkeeper.HasSupplier())
		return;
	
	GameVar @hasShopkeeper = GetLocalVar(LVAR_has_shopkeeper, player.Id);	
	if (hasShopkeeper != 0)
		return;
		
	if( _CritCountItem( player, PID_BOTTLE_CAPS ) < 10000 )
	{
		npc.Say(SAY_NORM_ON_HEAD, "No money - no honey.");
		return;
	}
	
	uint[] players;
	if(IsAnyData(_ADK_SK_AUCTION(npc.Id)))
	{
		GetAnyData(_ADK_SK_AUCTION(npc.Id),players);
		if (players.find(player.Id)>=0)
		{
			npc.Say(SAY_NORM_ON_HEAD, "You already in my list.");
			return;
		}
	}
	else
		CreateTimeEvent(__FullSecond + REAL_DAY(1), "e_AuctionFinished", npc.Id, true);
	
	player.DeleteItem( PID_BOTTLE_CAPS, 10000 );	
	players.insertLast(player.Id);
	SetAnyData(_ADK_SK_AUCTION(npc.Id), players);
	npc.Say(SAY_NORM_ON_HEAD, "You in the list now!");
}

uint e_AuctionFinished(array<uint>@ values)
{
	Critter@ npc = GetCritter(values[0]);
	if(!valid(npc))
		return 0;
	Shopkeeper shopkeeper(npc);
	if (shopkeeper.HasSupplier())
		return 0;

	uint[] players;
	if(IsAnyData(_ADK_SK_AUCTION(npc.Id)))
	{
		GetAnyData(_ADK_SK_AUCTION(npc.Id),players);
		while( players.length() > 0 )
		{
			uint index = Random(0,players.length()-1);
			uint id = players[index];
			string@ name = GetPlayerName(id);
			if(valid(name))
			{
				GameVar @hasShopkeeper = GetLocalVar(LVAR_has_shopkeeper, id);	
				if (hasShopkeeper==0)
				{
					shopkeeper.SetSupplier(id, __FullSecond + REAL_DAY(7));
					break;
				}
			}
			players.removeAt(index);
		}
	}
	EraseAnyData(_ADK_SK_AUCTION(npc.Id));
	return 0;
}

void r_EndContract(Critter& player, Critter@ npc)
{
	if(!valid(npc))
		return;
		
	Shopkeeper shopkeeper(npc);
	if(!shopkeeper.IsSupplier(player))
		return;
		
	shopkeeper.SetSupplier(player.Id, __FullSecond);
}

bool d_HasSupplier(Critter& player, Critter@ npc)
{
	Shopkeeper shopkeeper(npc);
	return shopkeeper.HasSupplier();
}

bool d_HasNoSupplier(Critter& player, Critter@ npc)
{
	Shopkeeper shopkeeper(npc);
	return !shopkeeper.HasSupplier();
}

bool d_IsSupplier(Critter& player, Critter@ npc)
{
	if(!valid(npc))
		return false;
	
	Shopkeeper shopkeeper(npc);
	return shopkeeper.IsSupplier(player);
}

bool d_IsNotSupplier(Critter& player, Critter@ npc)
{
	if(!valid(npc))
		return false;
	
	Shopkeeper shopkeeper(npc);
	return !shopkeeper.IsSupplier(player);
}

bool d_HasOldItems(Critter& player, Critter@ npc)
{
	if(!valid(npc))
		return false;
	
	Shopkeeper shopkeeper(npc);
	return shopkeeper.HasOldItems(player);
}

bool d_HasNoOldItems(Critter& player, Critter@ npc)
{
	if(!valid(npc))
		return false;
	
	Shopkeeper shopkeeper(npc);
	return !shopkeeper.HasOldItems(player);
}

bool d_IsSupplierForLessThanDays(Critter& player, Critter@ npc, int days)
{
	if(!valid(npc))
		return false;
	
	Shopkeeper shopkeeper(npc);
	return shopkeeper.IsSupplier(player) 
			&& shopkeeper.GetSupplyEndTime() < uint(__FullSecond + REAL_DAY(days));
}

bool d_IsSupplierForMoreThanDays(Critter& player, Critter@ npc, int days)
{
	if(!valid(npc))
		return false;
		
	Shopkeeper shopkeeper(npc);
	return shopkeeper.IsSupplier(player) 
			&& shopkeeper.GetSupplyEndTime() > uint(__FullSecond + REAL_DAY(days));
}

void dlg_SetDaysLeft(Critter& player, Critter@ npc, string@ lexems)
{
	if(IS_DIALOG_END(lexems) || IS_DIALOG_SAY_MODE(lexems) || !valid(npc))
        return;
        
    Shopkeeper shopkeeper(npc);
    uint daysLeft = 0;
    
    if(shopkeeper.IsSupplier(player))
    {
		daysLeft = shopkeeper.GetSupplyEndTime() - __FullSecond;
		daysLeft /= __TimeMultiplier * 60 * 60 * 24;
		daysLeft++;
	}
    lexems = "$daysLeft" + daysLeft;
}

void r_SetupItemCosts(Critter& player, Critter@ npc)
{
	if(!valid(npc))
		return;
		
	SetupItemCosts(player, npc);
}
