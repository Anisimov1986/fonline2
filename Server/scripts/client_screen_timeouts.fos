#include "_client_defines.fos"
#include "client_gui_h.fos"

#include "_macros.fos"
#include "_msgstr.fos"

const uint16[] timeouts = {
TO_SPAWN_TIMEOUT,
TO_BATTLE,
TO_JAIL,
TO_REPLICATION,
TO_SK_LOCKPICK,
TO_SK_STEAL,
TO_SK_FIRST_AID,
TO_SK_DOCTOR,
TO_SK_SCIENCE,
TO_SK_REPAIR,
TO_MEDICATION,
TO_JET,
TO_PSYHO,
TO_BUFFOUT,
TO_NUKA,
TO_CIGGS
};

bool Enabled = true;
//import void ToggleTimeoutScreen() from "client_screen_timeouts";
void ToggleTimeoutScreen()
{
	Enabled = !Enabled;
}

//import void InitTimeoutScreenPanel() from "client_screen_timeouts";
void InitTimeoutScreenPanel()
{
	TimeoutTextCallback callback;
	
	@TimeoutNames = GUI_AddText(CLIENT_MAIN_SCREEN_GAME, "", 0, 0)
	  .TextOptions(FONT_FALLOUT, COLOR_DGREEN, FT_CENTERR | FT_BOTTOM | FT_BORDERED)
      .AbsolutePosition(__ScreenWidth - 170, __ScreenHeight - 140)
      .TextBoxSize(100, 130)
      .CallbackDraw(callback);
      
    @TimeoutTimes = GUI_AddText(CLIENT_MAIN_SCREEN_GAME, "", 0, 0)
	  .TextOptions(FONT_FALLOUT, COLOR_DGREEN, FT_CENTERR | FT_BOTTOM | FT_BORDERED)
      .AbsolutePosition(__ScreenWidth - 60, __ScreenHeight - 140)
      .TextBoxSize(50, 130)
      .CallbackDraw(callback);
	
	@WorldMapTimeoutNames = GUI_AddText(CLIENT_MAIN_SCREEN_GLOBAL_MAP, "", 0, 0)
	  .TextOptions(FONT_FALLOUT, COLOR_LGREEN, FT_CENTERR | FT_BOTTOM | FT_BORDERED)
      .AbsolutePosition(__ScreenWidth - 170, __ScreenHeight - 140) 
      .TextBoxSize(100, 130)
      .CallbackDraw(callback);
     
    @WorldMapTimeoutTimes = GUI_AddText(CLIENT_MAIN_SCREEN_GLOBAL_MAP, "", 0, 0)
	  .TextOptions(FONT_FALLOUT, COLOR_LGREEN, FT_CENTERR | FT_BOTTOM | FT_BORDERED)
      .AbsolutePosition(__ScreenWidth - 60, __ScreenHeight - 140) 
      .TextBoxSize(50, 130)
      .CallbackDraw(callback);
}

IGUIElementTextOpt@ TimeoutNames;
IGUIElementTextOpt@ TimeoutTimes;
IGUIElementTextOpt@ WorldMapTimeoutNames;
IGUIElementTextOpt@ WorldMapTimeoutTimes;

const int[] DrugTimers = { TO_NUKA, TO_BUFFOUT, TO_PSYHO, TO_JET, TO_CIGGS };
const int[] TbTimers = { TB_NUKA, TB_BUFFOUT, TB_PSYHO, TB_JET, TB_CIGGS };
class TimeoutTextCallback : IGUIElementCallbackDraw
{
	void OnDraw(int id) override
	{
		if(!Enabled)
		{
			TimeoutNames.setText("");
			TimeoutTimes.setText("");
			WorldMapTimeoutNames.setText("");
			WorldMapTimeoutTimes.setText("");
			return;
		}
		
		CritterCl@ chosen = GetChosen();
		if(chosen is null)
			return;
		
		string@ timeoutNames = "";
		string@ timeoutTimes = "";
		
		for (uint i = 0; i < timeouts.length(); i++)
		{
            if (timeouts[i]==TO_BATTLE && IS_TURN_BASED_TIMEOUT(chosen))
                continue;
            int num = DrugTimers.find(timeouts[i]);
            if (num>=0 && chosen.Param[TbTimers[num]]>0)
            {
                timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, STR_PARAM_NAME(timeouts[i])) + ":";
                timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TbTimers[num]]);
            }
            else if (chosen.Param[timeouts[i]]>0)
            {
                timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, STR_PARAM_NAME(timeouts[i])) + ":";    
                timeoutTimes += "\n" + GetTimeoutString(chosen.Param[timeouts[i]]);
            }
		}
		/*
		if(chosen.Param[TO_BATTLE] > 0 && !IS_TURN_BASED_TIMEOUT(chosen))
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102381) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_BATTLE]);
		}
		if(chosen.Param[TO_JAIL] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 249) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_JAIL]);
		}
		if(chosen.Param[TO_REPLICATION] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102411) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_REPLICATION]);
		}
		if(chosen.Param[TO_SK_LOCKPICK] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102341) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_SK_LOCKPICK]);
		}
		if(chosen.Param[TO_SK_STEAL] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102351) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_SK_STEAL]);
		}
		if(chosen.Param[TO_SK_FIRST_AID] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102301) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_SK_FIRST_AID]);
		}
		if(chosen.Param[TO_SK_DOCTOR] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102311) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_SK_DOCTOR]);
		}
		if(chosen.Param[TO_SK_SCIENCE] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102331) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_SK_SCIENCE]);
		}
		if(chosen.Param[TO_SK_REPAIR] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102321) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_SK_REPAIR]);
		}
		if(chosen.Param[TO_MEDICATION] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, 102451) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_MEDICATION]);
		}
		if(chosen.Param[TO_JET] > 0)
		{
			timeoutNames += "\n" + GetMsgStr(TEXTMSG_GAME, _Text(TO_JET)) + ":";
			timeoutTimes += "\n" + GetTimeoutString(chosen.Param[TO_JET]);
		}
		*/
		
		TimeoutNames.setText(timeoutNames);
		TimeoutTimes.setText(timeoutTimes);
		WorldMapTimeoutNames.setText(timeoutNames);
		WorldMapTimeoutTimes.setText(timeoutTimes);
	}
	
	string@ GetTimeoutString(uint time)
	{
		string@ timeString = "";
		time /= __TimeMultiplier;
		
		time++; //correction
		uint seconds = time % 60;
		uint hours = time / (60 * 60);
		uint minutes = time / 60 - hours * 60;
		
		if(hours > 0)
		{
			timeString += hours + ":";
			if(minutes < 10)
				timeString += "0";
		}
			
		if(minutes > 0 || hours > 0)
		{
			timeString += minutes + ":";
			if(seconds < 10)
				timeString += "0";
		}
		timeString += seconds;
		if(hours == 0 && minutes == 0)
			timeString += " s";
		
		return timeString;
	}
}


