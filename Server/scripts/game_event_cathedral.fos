#include "_macros.fos"
#include "entire.fos"
#include "_npc_pids.fos"

#include "pids_groups.fos"
#include "utils_h.fos"
#include "game_event_gossip_h.fos"
#include "_msgstr.fos" 

#define ROLE_ATTACKER		( 288000 )
#define ATTACKERS			( 10 )
#define SUPPLY_AMMO			( 0 )
#define SUPPLY_ARMORS		( 1 )
#define SUPPLY_WEAPONS		( 2 )
#define SUPPLY_MEDS		    ( 3 )
#define ENTIRE_EVENT_MOB_SPAWN_MUTANTS		    (304)
#define ENTIRE_EVENT_MOB_SPAWN_ENCLAVE		    (305)

import bool AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run ) from "npc_planes";
import void AddNewMessage( string text,int time, int showtimer, uint color, bool eventtimer,uint eventid) from "stocmessages";
import int GetNextTime(uint Id) from "game_events";

//Setup dla mutków
int[] Mutparams = { MODE_NO_LOOT, 1, MODE_NO_DROP, 1,ST_LUCK ,10,
PE_BETTER_CRITICALS ,1,PE_BONUS_RATE_OF_FIRE,1,PE_BONUS_RANGED_DAMAGE,2,
MODE_NO_LOOSE_LIMBS, 1, MODE_NO_STEAL, 1, MODE_UNLIMITED_AMMO, 1, 
ST_BONUS_LOOK, 100, ST_NPC_ROLE, ROLE_ATTACKER, ST_REPLICATION_TIME, -1, SK_SNEAK, 300, MODE_HIDE, 1, ST_BAG_ID, 0, PE_IMPLANT_SCOUT, 10, ST_ARMOR_CLASS, -600 };
const int[] MutAttackerPids = { NPC_PID_NIGHTKIN };
const int[] MutWeaponPids = { PID_LASER_RIFLE_EXT_CAP, PID_ROCKET_LAUNCHER };
//Setup dla enclave
const int[] EncAttackerPids = { NPC_PID_SIERRAENCLAVE2, NPC_PID_SIERRAENCLAVE3, NPC_PID_SIERRAENCLAVE4 };
const int[] EncWeaponPids = { PID_BOZAR, PID_ROCKET_LAUNCHER, PID_M72_GAUSS_RIFLE , PID_YK42B_PULSE_RIFLE };
int[] Encparams = { MODE_NO_LOOT, 1, MODE_NO_DROP, 1,ST_LUCK ,10,
PE_BETTER_CRITICALS ,1,PE_BONUS_RATE_OF_FIRE,1,PE_BONUS_RANGED_DAMAGE,2,
MODE_NO_LOOSE_LIMBS, 1, MODE_NO_STEAL, 1, MODE_UNLIMITED_AMMO, 1, 
ST_BONUS_LOOK, 100, ST_NPC_ROLE, ROLE_ATTACKER, ST_REPLICATION_TIME, -1 };
//Robed person stats
int[] Robedparams = { MODE_NO_LOOT, 0, MODE_NO_DROP, 1,ST_LUCK ,10,
PE_BETTER_CRITICALS ,1,PE_BONUS_RATE_OF_FIRE,1,PE_BONUS_RANGED_DAMAGE,2,
MODE_NO_LOOSE_LIMBS, 1, MODE_NO_STEAL, 1, MODE_UNLIMITED_AMMO, 1, 
ST_BONUS_LOOK, 100, ST_NPC_ROLE, ROLE_ATTACKER, ST_REPLICATION_TIME, -1, DAMAGE_LEFT_ARM, 1, MODE_NO_RUN, 1 };

uint eventid()
{
	return CreateTimeEvent(__FullSecond+REAL_MINUTE(Random(360,600)), "e_event_start", 0, true);
}

uint e_event_start(array<uint>@ values)
{
	if (values[0]==0)
		return 0;
	event_start(values[0]);
	return GetNextTime(values[0]);
}

void event_start(uint id)
{
	Map@ map = GetMapByPid(MAP_cath_enter,0);
	if (!valid(map))
		return;
    Item@ car = map.AddItem( 86, 65, PID_SCOUT, 1 );
    if( not valid( car ) )
        return;
	AddNewMessage( "There are rumors about,  that there is something suspicious happening in the Cathedral...",REAL_MINUTE(10), 1, COLOR_WHITE, true, id);
	CreateTimeEvent(__FullSecond+REAL_MINUTE(10), "e_event_stop", id, true);
    car.LockerId = 1;
    car.Charge = Random( 0, car.Proto.Car_TankVolume );
    car.Deterioration = Random( 0, car.Proto.Car_MaxDeterioration );
	Item@ bag = car.GetChild( 0 );
	SETFLAG(bag.LockerCondition, LOCKER_GUARDED );
	bag.LockerId=ROLE_ATTACKER;
	AddLoot(bag);
	//Muties
	uint entiresnum = map.CountEntire(ENTIRE_EVENT_MOB_SPAWN_MUTANTS);
	uint16 hexX=0;
	uint16 hexY=0;
	uint8 dir=0;
	uint attackers=0;
	for (uint8 i=0; i<entiresnum;i++)
	{
		if (attackers>=ATTACKERS)
			break;
		if (map.GetEntireCoords (ENTIRE_EVENT_MOB_SPAWN_MUTANTS, i, hexX, hexY,dir) && AddAttackerMut(hexX,hexY,dir))
			attackers++;
	}
	//Enclave
	entiresnum = map.CountEntire(ENTIRE_EVENT_MOB_SPAWN_ENCLAVE);
	hexX=0;
	hexY=0;
	dir=0;
	for (uint8 i=0; i<entiresnum;i++)
	{
		if (attackers>=ATTACKERS)
			break;
		if (map.GetEntireCoords (ENTIRE_EVENT_MOB_SPAWN_ENCLAVE, i, hexX, hexY,dir) && AddAttackerEnc(hexX,hexY,dir))
			attackers++;
	}
	SpawnRobedMan();
	
	InitializeGossip(id);
}

void InitializeGossip(uint id)
{	
	Location@ location = GetLocationByPid(LOCATION_Cathedral, 0);
	if (!valid(location)) 
	{
		return;
	}
	
	GossipDefinition@ gossipDefinition = CreateGossipDefinition(GOSSIP_MEDIUM, REAL_MINUTE(10));
	gossipDefinition.SetGossipId(id);
	gossipDefinition.SetScopeId(GOSSIP_SCOPE_EVENT);
	gossipDefinition.SetSourceLocationId(location.Id);
	gossipDefinition.SetMsgId(STR_CATHEDRAL_EVENT_GOSSIP_LOC);
	gossipDefinition.SetSourceMsgId(STR_CATHEDRAL_EVENT_GOSSIP_NO_LOC);
	StartGossip(gossipDefinition);
}

uint e_event_stop(array<uint>@ values)
{
	Map@ map = GetMapByPid(MAP_cath_enter,0);
	if (!valid(map))
		return 0;
	array<Item@> cars;
	map.GetItems(PID_SCOUT, cars);
	for (uint i=0 ; i<cars.length() ; i++)
	{
		DeleteItem(cars[i]);
	}
	array<Critter@> npcs;
	map.GetCritters(0, FIND_ALL | FIND_ONLY_NPC, npcs);
	for (uint i = 0; i < npcs.length(); i++)
	{
		if(npcs[i].Stat[ST_NPC_ROLE] == ROLE_ATTACKER)
			DeleteNpc(npcs[i]);
	}
	uint entiresnum = map.CountEntire(ENTIRE_EVENT_BOX_SPAWN);
	uint16 hexX=0;
	uint16 hexY=0;
	for (uint8 i=0; i<entiresnum;i++)
	{
		if (map.GetEntireCoords(ENTIRE_EVENT_BOX_SPAWN, i, hexX, hexY))
		{
			Item@[] items;
			map.GetItems( hexX, hexY, items );
			for (uint8 j=0; j<items.length();j++)
			{
				if (items[j].GetType() == ITEM_TYPE_CONTAINER)
				DeleteItem(items[j]);
			}

		}
	}
	
	StopGossip(values[0], GOSSIP_SCOPE_EVENT);
	
	return 0;
}

//MUTANTY
bool AddAttackerMut(uint16 hexX,uint16 hexY, uint8 dir)
{
	Map@ map = GetMapByPid(MAP_cath_enter,0);
	if(!GetFreeHex(map, 1,hexX, hexY))
	{
		return false;
	}
	Critter@ attacker1 = map.AddNpc(MutAttackerPids[(Random(0,MutAttackerPids.length()-1))], hexX, hexY,	dir,	Mutparams, null, null);
	
	if (!valid(attacker1))
		return false;
	Item@ weapon = attacker1.AddItem(MutWeaponPids[Random(0,MutWeaponPids.length()-1)], 1);
	if (valid(weapon) && weapon.GetProtoId () == PID_ROCKET_LAUNCHER)
			weapon.AmmoPid=PID_ROCKET_AP;
			
	attacker1.ParamBase[PERMASNEAK]=1;
	_AttackerInit(attacker1, true);
	attacker1.SetScript("_AttackerInit");
	attacker1.SetFavoriteItem(SLOT_HAND1, weapon.GetProtoId ());
	Critter@[] deffenders;
	map.GetCritters(0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, deffenders);
	AttackTargets1(attacker1, deffenders);
	return true;
}

void _AttackerInit(Critter& attacker, bool firstTime)
{
	attacker.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_Show");
	attacker.SetEvent(CRITTER_EVENT_DEAD, "_Dead");
}

void AttackTargets1(Critter@ attacker1, Critter@[] targets) 
{
	for (uint i = 0; i < targets.length(); i++)
	{
		AddAttackPlane(attacker1, Random(AI_PLANE_ATTACK_PRIORITY, AI_PLANE_ATTACK_PRIORITY + 20), targets[i], true);
		attacker1.AddEnemyInStack(targets[i].Id);
	}
}


//ENCLAVE
bool AddAttackerEnc(uint16 hexX,uint16 hexY, uint8 dir)
{
	Map@ map = GetMapByPid(MAP_cath_enter,0);
	if(!GetFreeHex(map, 1,hexX, hexY))
	{
		return false;
	}
	Critter@ attacker2 = map.AddNpc(EncAttackerPids[(Random(0,EncAttackerPids.length()-1))], hexX, hexY,	dir,	Encparams, null, null);
	
	if (!valid(attacker2))
		return false;
	Item@ weapon = attacker2.AddItem(EncWeaponPids[Random(0,EncWeaponPids.length()-1)], 1);
	if (valid(weapon) && weapon.GetProtoId () == PID_ROCKET_LAUNCHER)
			weapon.AmmoPid=PID_ROCKET_AP;
	_AttackerInit(attacker2, true);
	attacker2.SetScript("_AttackerInit");
	attacker2.SetFavoriteItem(SLOT_HAND1, weapon.GetProtoId ());
	Critter@[] deffenders;
	map.GetCritters(0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, deffenders);
	AttackTargets2(attacker2, deffenders);
	return true;
}

void SpawnRobedMan()
{
	Map@ map = GetMapByPid(MAP_cath_enter,0);
	Critter@ robedman = map.AddNpc(NPC_PID_ROBEDMAN, 78, 65,	4,	Robedparams, null, null);
	Item@ weapon = robedman.AddItem(PID_LASER_PISTOL, 1);
	
	robedman.SetFavoriteItem(SLOT_HAND1, weapon.GetProtoId ());
	robedman.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_Show");
	robedman.SetEvent(CRITTER_EVENT_DEAD, "_Dead");
	Critter@[] deffenders;
	map.GetCritters(0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, deffenders);
	AttackTargets3(robedman, deffenders);	

	}

void AttackTargets2(Critter@ attacker2, Critter@[] targets) 
{
	for (uint i = 0; i < targets.length(); i++)
	{
		AddAttackPlane(attacker2, Random(AI_PLANE_ATTACK_PRIORITY, AI_PLANE_ATTACK_PRIORITY + 20), targets[i], true);
		attacker2.AddEnemyInStack(targets[i].Id);
	}
}


void AttackTargets3(Critter@ robedman, Critter@[] targets) 
{
	for (uint i = 0; i < targets.length(); i++)
	{
		AddAttackPlane(robedman, Random(AI_PLANE_ATTACK_PRIORITY, AI_PLANE_ATTACK_PRIORITY + 20), targets[i], true);
		robedman.AddEnemyInStack(targets[i].Id);
	}
}

void _Show(Critter& npc, Critter& cr)
{
	if (cr.IsPlayer() && !npc.CheckEnemyInStack(cr.Id))
	{
		npc.AddEnemyInStack( cr.Id );
		AddAttackPlane( npc, Random(AI_PLANE_ATTACK_PRIORITY, AI_PLANE_ATTACK_PRIORITY + 20), cr ,true);
	}
}


void _Dead(Critter& mob, Critter@ killer)
{
    mob.ClearEnemyStack();
}

void AddLoot(Item@ locker)
{
		FillBag( locker, PID_PULSE_GRENADE,   		   100,  6, 8 );
		FillBag( locker, PID_YK42B_PULSE_RIFLE,   			   100,  1, 1 );
		FillBag( locker, PID_YK32_PULSE_PISTOL,   			   100,   1, 1 );
		FillBag( locker, PID_BUFFOUT, 					90,    10, 25 );
		FillBag( locker, PID_PSYCHO, 					90,    5, 13 );
		FillBag( locker, PID_JET, 				    	90,    10, 25 );
		FillBag( locker, PID_HYPO, 				   		90,    1, 3 );
		FillBag( locker, PID_BLACK_COMBAT_ARMOR, 				90,    1, 2 );
}

void event_start( Critter& cr, int, int , int)
{
	event_start(2);
}
void event_stop( Critter& cr, int, int , int)
{
	e_event_stop(null);
}

void event_start(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	event_start(2);
}
void event_stop(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	e_event_stop(null);
}
