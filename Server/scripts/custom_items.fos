// Author: skycast
/*
Description Values
For Armor:
Val 5
---------------
0  - Normal  DR +
1  - Laser   DR +
2  - Fire    DR +
3  - Plasma  DR +
4  -
---------------
Val 6
---------------
5  - Electic DR +
6  - Explode DR +
7  - Normal  DT +
8  - Laser   DT +
9  - Durable +
---------------
Val 7
---------------
10 - Fire    DT +
11 - Plasma  DT +
12 - Electic DT +
13 - Explode DT +
14 -
---------------
Val 8
---------------
15 - Armor Class +
16 - Anti Crit
17 - Rad Resist +
18 - Pison Resist +
19 - Additional AP +
---------------
Val 9
---------------
20 - Additional Carryweight +
21 - 
22 - 
23 - 
24 -
---------------
---------------
For Weapons:
Val 5
---------------
0  - Minimal Damage +
1  - Maximum Damage +
2  - Accuracy +
3  - Crit Chance +
4  - AP reduced +
---------------
Val 6
---------------
5  - Crit Roll +
6  - Range +
7  - 
8  - 
9  - Durable +
---------------

*/

#include "_macros.fos"

#include "fix_boy_defines.fos"
#include "utils_for_array.fos"

const uint16[] ArmorStats =    {0 , 1, 2, 3, 5, 6,7,8,9,10,11,12,13,15,16,17,18,19,20};
const uint16[] ArmorStatsMax = {10,10,10,10,10,10,4,4,2, 4, 4, 4, 4,15,10,50,50, 1,20};

const uint16[] WeaponStats =    {0,1, 2,3,4,5,6,9};
const uint16[] WeaponStatsMax = {2,2,15,9,1,9,4,2};

const uint16[] UnarmedWeaponStats =   { 0 ,1 ,2 ,3 ,5 };
const uint16[] UnarmedStatsMax =      { 10,10,10,10,10 };

int PackedVal(int itemvalnum, int itemval, int offset)
{
	int[] ItemValues;
	ItemValues.resize(5);
	ItemValues[0] = itemvalnum % 100;
	ItemValues[1] = (itemvalnum / 100) % 100;
	ItemValues[2] = (itemvalnum / 10000) % 100;
	ItemValues[3] = (itemvalnum / 1000000) % 100;
	ItemValues[4] = (itemvalnum / 100000000) % 100;
	ItemValues[offset]=itemval;
	return ItemValues[4]*100000000 + ItemValues[3]*1000000 + ItemValues[2]*10000 + ItemValues[1]*100 + ItemValues[0];
}


void SaveCustomVal(Item& item, int ValueNum, int Value)
{
	if (!valid(item))
	{
		Log("Item not valid");
		return;
	}
	if (ValueNum>24)
	{
		Log("Value number out of bounds");
		return;
	}
	if (Value>99)
	{
		Log("Value out of bounds");
		return;
	}	
	if ((ValueNum==4 || ValueNum==9 || ValueNum==14 || ValueNum==19 || ValueNum==24) && Value>21 )
	{
		Log("Value out of bounds");
		return;
	}
	int[] ItemValues;
	ItemValues.resize(5);
	if (ValueNum>=0 && ValueNum<=4)
	{
		item.Val5 = PackedVal(item.Val5,Value,ValueNum);
	}
	if (ValueNum>=5 && ValueNum<=9)
	{
		item.Val6 = PackedVal(item.Val6,Value,(ValueNum-5));
	}
	if (ValueNum>=10 && ValueNum<=14)
	{
		item.Val7 = PackedVal(item.Val7,Value,(ValueNum-10));
	}
	if (ValueNum>=15 && ValueNum<=19)
	{
		item.Val8 = PackedVal(item.Val8,Value,(ValueNum-15));
	}
	if (ValueNum>=20 && ValueNum<=24)
	{
		item.Val9 = PackedVal(item.Val9,Value,(ValueNum-20));
	}
	item.Update();
}

void SaveValues(Item& item, int[] Values)
{
	if (valid(item) && Values.length()==25)
	{
		for (uint i=0; i<5 ; i++)
		{
			if (Values[4+(i*5)]>24)
			{
				Log("Error in item values - index out of bounds of value "+(4+(i*5))+" = "+(Values[4+(i*5)]));
				return;
			}
		}
		for (uint i=0; i<Values.length() ; i++)
		{
			if (Values[i]>99)
			{
				Log("Error in item values - index out of bounds of value "+i+" = "+Values[i]);
				return;
			}
			//if (Values[i]>0)
				//Log("Value"+i+"="+Values[i]+" SAVED");
		}
		item.Val5 = Values[4 ]*100000000 + Values[3 ]*1000000 + Values[2 ]*10000 + Values[1 ]*100 + Values[0 ];
		item.Val6 = Values[9 ]*100000000 + Values[8 ]*1000000 + Values[7 ]*10000 + Values[6 ]*100 + Values[5 ];
		item.Val7 = Values[14]*100000000 + Values[13]*1000000 + Values[12]*10000 + Values[11]*100 + Values[10];
		item.Val8 = Values[19]*100000000 + Values[18]*1000000 + Values[17]*10000 + Values[16]*100 + Values[15];
		item.Val9 = Values[24]*100000000 + Values[23]*1000000 + Values[22]*10000 + Values[21]*100 + Values[20];
	}
}

/*
int[] LoadValues(Item& item)
{
	int[] ItemValues;
	ItemValues.resize(25);
	if (valid(item))
	{
		int[] ValuesNum = {item.Val5,item.Val6,item.Val7,item.Val8,item.Val9};
		for (uint i=0; i<ValuesNum.length() ; i++)
		{
			ItemValues[i*5] = ValuesNum[i] % 100;
			ItemValues[1+(i*5)] = (ValuesNum[i] / 100) % 100;
			ItemValues[2+(i*5)] = (ValuesNum[i] / 10000) % 100;
			ItemValues[3+(i*5)] = (ValuesNum[i] / 1000000) % 100;
			ItemValues[4+(i*5)] = (ValuesNum[i] / 100000000) % 100;
		}
		return ItemValues;
	}
	ItemValues.resize(0);
	return ItemValues;
}
*/



void StatsGeneration(string player, Item& item, bool crafted) //EXPORT
{
	if (!valid(item))
		return;
	int random=Random(1,100);
	int statnum=0;
	if (item.GetType() == ITEM_TYPE_ARMOR )
	{
		if (random <= 20 )		//20%
			statnum=1;
		else if (random <= 40)	//20%
			statnum=2;
		else if (random <= 60)	//20%
			statnum=3;
		else if (random <= 70)	//10%
			statnum=4;
		else if (random <= 80)	//10%
			statnum=5;
		else if (random <= 90)	//10%
			statnum=6;
		else if (random <= 95)	//5%
			statnum=7;
		else				  	//5%
			statnum=8;
	}
	else if (item.GetType() == ITEM_TYPE_WEAPON )
	{
		if (random <= 40 ) 		//40%
			statnum=1;
		else if (random <= 70) 	//30%
			statnum=2;
		else if (random <= 90) 	//20%
			statnum=3;
		else					//10%
			statnum=4;
	}
	else
		return;
	GenerateRandomStats(player,item,statnum,crafted);
}

void GenerateRandomStats(string player, Item& item, int number, bool crafted)
{
	if (!valid(item))
		return;
	if (number < 1)
		return;
	int[] ItemValues;
	int statnum;
	string itemname;
	ItemValues.resize(25);
	item.Info = 2;
	for(uint i=0; i<ItemValues.length() ; i++)
	{
		ItemValues[i]=0;
	}
	for(int i=0; i<number ; i++)
	{	
		if ( item.GetType() == ITEM_TYPE_ARMOR )
		{
			statnum=Random(0,ArmorStats.length()-1);
			ItemValues[ArmorStats[statnum]]+=Random(1,ArmorStatsMax[statnum]);
			if (ItemValues[ArmorStats[statnum]]>ArmorStatsMax[statnum])
				ItemValues[ArmorStats[statnum]]=ArmorStatsMax[statnum];
		}
		if ( item.GetType() == ITEM_TYPE_WEAPON )
		{
			if (_WeaponSkill( item.Proto, 0 ) == SK_UNARMED)
			{
				statnum=Random(0,UnarmedWeaponStats.length()-1);
				ItemValues[UnarmedWeaponStats[statnum]]+=Random(1,UnarmedStatsMax[statnum]);
				if (ItemValues[UnarmedWeaponStats[statnum]]>UnarmedStatsMax[statnum])
					ItemValues[UnarmedWeaponStats[statnum]]=UnarmedStatsMax[statnum];
			}
			else
			{
				statnum=Random(0,WeaponStats.length()-1);
				ItemValues[WeaponStats[statnum]]+=Random(1,WeaponStatsMax[statnum]);
				if (ItemValues[WeaponStats[statnum]]>WeaponStatsMax[statnum])
					ItemValues[WeaponStats[statnum]]=WeaponStatsMax[statnum];
			}
		}
	}
	if ( item.GetType() == ITEM_TYPE_ARMOR )
	{
		if (number <=2) 
			itemname="|"+COLOR_GRAY;
		else if (number>2 && number <=4) 
			itemname="|"+COLOR_YELLOW;
		else if (number>4 && number <=6) 
			itemname="|"+COLOR_BLUE;
		else if (number>6) 
			itemname="|"+COLOR_ORANGE;
	}
	if ( item.GetType() == ITEM_TYPE_WEAPON )
	{
		if (number <= 1) 
			itemname="|"+COLOR_GRAY;
		else if (number==2) 
			itemname="|"+COLOR_YELLOW;
		else if (number==3) 
			itemname="|"+COLOR_BLUE;
		else if (number>=4) 
			itemname="|"+COLOR_ORANGE;
	}
	SaveValues(item, ItemValues);
	ItemValues.resize(0);
	if (crafted)
		item.SetLexems( "$statsname" + itemname + "$craftername" + player);
	else
		item.SetLexems( "$statsname" + itemname );
	item.Update();
}

void GenerateStats(Item& item)
{
	if ((HAS_CHANCE(40) && Present(item.GetProtoId (),Pids_Signed_Regular)) || HAS_CHANCE(1) && Present(item.GetProtoId (),Pids_Signed_Top))
		 StatsGeneration("", item, false);
}
