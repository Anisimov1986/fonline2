#include "entire_h.fos"

#include "_maps.fos"
#include "_itempid.fos"
#include "_npc_pids.fos"
#include "_teams.fos"
#include "_bags.fos"
#include "game_event_class_utils.fos"
#include "game_event_common_critters.fos"
#include "game_event_common_loot.fos"
#include "game_event_gossip_h.fos"
#include "_msgstr.fos" 

#define EVENT_DURATION                  (REAL_MINUTE(10))
#define GOSSIP_DELAY                    (REAL_MINUTE(3))
#define GOSSIP_DURATION                 (REAL_MINUTE(6))
#define GLOW_MINEFIELD_EVENT_ID         (29)
#define SIERRA_MINEFIELD_EVENT_ID       (30)
#define ARES_MINEFIELD_EVENT_ID         (31)
#define DESERT_MINEFIELD_EVENT_ID       (32)

import void SpawnEventFlares(Map& map, uint entire) from "game_event_utils";
import void RemoveEventFlares(Map& map) from "game_event_utils";
import int GetNextTime(uint Id) from "game_events";
import void SpawnMines(Map& map, uint entire, uint entireFillRatio, bool noLoot) from "game_event_utils";
import Location@+ GetNearestVisibleLocation(uint x, uint y) from "game_event_utils";

dictionary @minefieldEvents;
void initMinefieldEvents()
{
	@minefieldEvents = dictionary();
		
	minefieldEvents.set("" + GLOW_MINEFIELD_EVENT_ID, MinefieldEvent(GLOW_MINEFIELD_EVENT_ID)
		.AddWMRectangle(1260, 1620, 1490, 1740)       
		.AddWMRectangle(1295, 1740, 1440, 1790)
		.SetLocationProtoId(LOCATION_EventMinefieldM1)
		.SetCarProtoId(PID_POLICE_CAR)
		.SetEnemy(ROLE_REGULATOR, 6)
		.AddLoot(PID_MENTATS, 3, 5)
		.AddLoot(PID_BUFFOUT, 3, 5)
		.AddLoot(PID_PSYCHO, 2, 3)
		.AddLoot(PID_JET, 3, 5)
		.AddLoot(PID_RAD_X, 3, 5)
		.AddLoot(PID_RADAWAY, 3, 5)
		.AddLoot(PID_10MM_AP, 300, 500)
		.AddLoot(PID_5MM_AP, 300, 500)
		.AddLoot(PID_223_FMJ, 300, 500)
		.AddLoot(PID_NUKA_COLA, 4, 8)
		.AddLoot(PID_SUPER_STIMPAK, 4, 8)
		.AddLoot(PID_CIGARETTES, 4, 8)
		.AddLoot(PID_BOTTLE_CAPS, 2000, 2500)
		.AddLoot(commonRareLoot)
		.AddLoot(commonL3Loot)	
	);
	
	minefieldEvents.set("" + SIERRA_MINEFIELD_EVENT_ID, MinefieldEvent(SIERRA_MINEFIELD_EVENT_ID)
		.AddWMRectangle( 660,  480,  840,  540)       
		.AddWMRectangle( 600,  300,  780,  480)
		.AddWMRectangle( 780,  240,  900,  420)
		.SetLocationProtoId(LOCATION_EventMinefieldM1)
		.SetCarProtoId(PID_HIGHWAYMAN_GT)
		.SetEnemy(ROLE_ROGUE, 6)
		.AddLoot(PID_MENTATS, 3, 5)
		.AddLoot(PID_BUFFOUT, 3, 5)
		.AddLoot(PID_PSYCHO, 2, 3)
		.AddLoot(PID_JET, 3, 5)
		.AddLoot(PID_RAD_X, 3, 5)
		.AddLoot(PID_RADAWAY, 3, 5)
		.AddLoot(PID_10MM_AP, 300, 500)
		.AddLoot(PID_5MM_AP, 300, 500)
		.AddLoot(PID_223_FMJ, 300, 500)
		.AddLoot(PID_NUKA_COLA, 4, 8)
		.AddLoot(PID_SUPER_STIMPAK, 4, 8)
		.AddLoot(PID_CIGARETTES, 4, 8)
		.AddLoot(PID_BOTTLE_CAPS, 2000, 2500)
		.AddLoot(commonRareLoot)
		.AddLoot(commonL3Loot)		
	);
	
	minefieldEvents.set("" + ARES_MINEFIELD_EVENT_ID, MinefieldEvent(ARES_MINEFIELD_EVENT_ID)
		.AddWMRectangle(1260,    0, 1490,  240)       
		.AddWMRectangle(1320,  240, 1440,  300)
		.AddWMRectangle(1200,  240, 1320,  360)
		.AddWMRectangle(1440,  420, 1490,  600)
		.SetLocationProtoId(LOCATION_EventMinefieldD1)
		.SetCarProtoId(PID_HIGHWAYMAN)
		.SetEnemy(ROLE_KHAN, 6)
		.AddLoot(PID_MENTATS, 3, 5)
		.AddLoot(PID_BUFFOUT, 3, 5)
		.AddLoot(PID_PSYCHO, 2, 3)
		.AddLoot(PID_JET, 3, 5)
		.AddLoot(PID_RAD_X, 3, 5)
		.AddLoot(PID_RADAWAY, 3, 5)
		.AddLoot(PID_10MM_AP, 300, 500)
		.AddLoot(PID_5MM_AP, 300, 500)
		.AddLoot(PID_223_FMJ, 300, 500)
		.AddLoot(PID_NUKA_COLA, 4, 8)
		.AddLoot(PID_SUPER_STIMPAK, 4, 8)
		.AddLoot(PID_CIGARETTES, 4, 8)
		.AddLoot(PID_BOTTLE_CAPS, 2000, 2500)
		.AddLoot(commonRareLoot)
		.AddLoot(commonL3Loot)		
	);
	
	minefieldEvents.set("" + DESERT_MINEFIELD_EVENT_ID, MinefieldEvent(DESERT_MINEFIELD_EVENT_ID)
		.AddWMRectangle( 420,  420,  600,  780)       
		.AddWMRectangle( 600,  660,  720,  780)
		.AddWMRectangle( 540,  780,  780,  900)
		.AddWMRectangle( 660,  900,  960, 1020)
		.AddWMRectangle( 720, 1020, 1020, 1320)
		.SetLocationProtoId(LOCATION_EventMinefieldD1)
		.SetCarProtoId(PID_HIGHWAYMAN_GT)
		.SetEnemy(ROLE_ROGUE, 6)
		.AddLoot(PID_MENTATS, 3, 5)
		.AddLoot(PID_BUFFOUT, 3, 5)
		.AddLoot(PID_PSYCHO, 2, 3)
		.AddLoot(PID_JET, 3, 5)
		.AddLoot(PID_RAD_X, 3, 5)
		.AddLoot(PID_RADAWAY, 3, 5)
		.AddLoot(PID_10MM_AP, 300, 500)
		.AddLoot(PID_5MM_AP, 300, 500)
		.AddLoot(PID_223_FMJ, 300, 500)
		.AddLoot(PID_NUKA_COLA, 4, 8)
		.AddLoot(PID_SUPER_STIMPAK, 4, 8)
		.AddLoot(PID_CIGARETTES, 4, 8)
		.AddLoot(PID_BOTTLE_CAPS, 2000, 2500)
		.AddLoot(commonRareLoot)
		.AddLoot(commonL3Loot)		
	);
}


uint e_event_start(array<uint>@ values)
{
	if (values[0] == 0)
	{
		return 0;
	}
	
	event_start(values[0]);	
	return GetNextTime(values[0]);
}

void event_start(int id) 
{
	MinefieldEvent @minefieldEvent;
		
	if (!valid(minefieldEvents))
	{
		initMinefieldEvents();
	}
	
	if (minefieldEvents.get("" + id, @minefieldEvent))
	{
		minefieldEvent.StartEvent();
		
		uint[] values = {id};
		CreateTimeEvent(__FullSecond + EVENT_DURATION, "e_event_stop", values, true);
	}
}

uint e_event_stop(array<uint>@ values)
{
	MinefieldEvent @minefieldEvent;
		
	if (!valid(minefieldEvents))
	{
		initMinefieldEvents();
	}
	
	if (minefieldEvents.get("" + values[0], @minefieldEvent))
	{
		minefieldEvent.StopEvent();
	}
	
	return 0;
}

void event_start( Critter& cr, int id, int , int)
{
	event_start(id);
}

void event_stop( Critter& cr, int id, int , int)
{
	uint[] values = {id};
	e_event_stop(values);
}

void event_start(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	event_start(values[0]);
}

void event_stop(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	array<uint> v(values.length);
	
	for (uint i = 0; i < values.length(); i++)
	{
		v[i] = values[i];
	}
	
	e_event_stop(v);
}


class MinefieldEvent
{	
	private int eventId, enemyRole, enemyCount;
	private uint locationProtoId, carProtoId;
	private AutoLootGenerator autoLootGenerator;
	private WorldMapArea worldMapArea;

	
	MinefieldEvent(int eventId)
	{
		this.eventId = eventId;
	}
	
	MinefieldEvent@ AddWMRectangle(int worldMinX, int worldMinY, int worldMaxX, int worldMaxY)
	{
		worldMapArea.AddRectangle(worldMinX, worldMinY, worldMaxX, worldMaxY);	
		return @this;
	}
	
	MinefieldEvent@ SetLocationProtoId(uint locationProtoId)
	{
		this.locationProtoId = locationProtoId;
		return @this;
	}
	
	MinefieldEvent@ SetCarProtoId(uint carProtoId)
	{
		this.carProtoId = carProtoId;
		return @this;
	}
	
	MinefieldEvent@ SetEnemy(int enemyRole, int enemyCount)
	{
		this.enemyRole = enemyRole;
		this.enemyCount = enemyCount;
		return @this;
	}
	
	MinefieldEvent@ AddLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity)
	{
		autoLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity);
		return @this;
	}
	
	MinefieldEvent@ AddLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity, double probability)
	{
		autoLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity, probability);
		return @this;
	}
	
	MinefieldEvent@ AddLoot(AutoLootGenerator& autoLootGenerator)
	{
		this.autoLootGenerator.AddLoot(autoLootGenerator);
		return @this;
	}
	
	bool IsEventMap(Map& map)
	{
		AutoLocation autoLocation = AutoLocation(eventId);
		return autoLocation.IsLocationMap(map);
	}
	
	void StartEvent()
	{	
		AutoLocation autoLocation = AutoLocation(eventId);
		
		Location @location = autoLocation.Create(locationProtoId, worldMapArea);
		
		if (!valid(location))
		{
			return;
		}
		
		location.Visible = true;
		location.AutoGarbage = false;
		location.Color = COLOR_RED;
	
		Map @map = location.GetMapByIndex(0); 
		if (!valid(map)) 
		{
			autoLocation.Delete();
			return;
		}
		
		AddCars(map);
		AddDefenders(map);
		SpawnMines(map, ENTIRE_EVENT_MINE_SPAWN, 60, true);
		map.SetScript("_MapInit");
		
		SpawnEventFlares(map, ENTIRE_EVENT_FLARE_SPAWN);
		InitializeGossip(location);
	}
	
	void InitializeGossip(Location &location)
	{		
		Location @townLocation = GetNearestVisibleLocation(location.WorldX, location.WorldY);
		if (!valid(townLocation)) 
		{
			return;
		}
		
		CritterTemplate@ critterTemplate = GetCritterTemplate(enemyRole);
		int critterPid = critterTemplate.GetCritterPids()[0];
		
		GossipDefinition@ gossipDefinition = CreateGossipDefinition(GOSSIP_MEDIUM, GOSSIP_DURATION);
		gossipDefinition.SetGossipId(eventId);
		gossipDefinition.SetScopeId(GOSSIP_SCOPE_EVENT);
		gossipDefinition.SetDelay(GOSSIP_DELAY);
		gossipDefinition.SetSourceLocationId(location.Id);
		gossipDefinition.SetMsgId(STR_MINEFIELD_EVENT_GOSSIP_LOC);
		gossipDefinition.SetSourceMsgId(STR_MINEFIELD_EVENT_GOSSIP_NO_LOC);
		gossipDefinition.SetLexems("$locationname" + "@msg GM " + STR_LOC_NAME(townLocation.GetProtoId()) + "@"
				+ "$crittername" + "@msg DLG " + STR_NPC_PROTO_NAME(critterPid) + "@");
		StartGossip(gossipDefinition);
	}	
	
	void StopEvent()
	{
		AutoLocation autoLocation = AutoLocation(eventId);
		
		if (!autoLocation.IsCreated())
		{
			return;
		}
	
		autoLocation.Delete();
		
		Location @location = autoLocation.GetLocation();
		
		location.Visible = false;
		location.AutoGarbage = true;
		location.Update();
	
		Map @map = location.GetMapByIndex(0); 
		if (!valid(map)) 
		{
			return;
		}
	
		RemoveEventFlares(map);
		
		StopGossip(eventId, GOSSIP_SCOPE_EVENT);
	}
	
	private void AddCars(Map& map)
	{
		uint entireCarSpawnNum = map.CountEntire(ENTIRE_EVENT_CAR_SPAWN);
		AutoCarTemplate autoCarTemplate = AutoCarTemplate(carProtoId, ENTIRE_EVENT_CAR_SPAWN)
			.AddLoot(autoLootGenerator, 1.0 / entireCarSpawnNum);

		for (uint i = 0; i < entireCarSpawnNum; i++)
		{
			autoCarTemplate.Spawn(map, i);
		}
	}
	
	private void AddDefenders(Map& map)
	{		
		CritterTemplate@ critterTemplate = GetCritterTemplate(enemyRole);
		
		for (int i = 0; i < enemyCount; i++)
		{
			Critter@ critter = critterTemplate.Spawn(map);
		}
		
		critterTemplate.ToDeadAll(map, ANIM2_DEAD_EXPLODE);
	}
	
	void TryStopEvent()
	{
		AutoLocation autoLocation = AutoLocation(eventId);
		if (!autoLocation.IsCreated())
		{
			return;
		}
	
		Location @location = autoLocation.GetLocation();
		Map @map = location.GetMapByIndex(0);

		if (!valid(map)) 
		{
			return;
		}
		
		AutoCarTemplate autoCarTemplate = AutoCarTemplate(carProtoId, ENTIRE_EVENT_CAR_SPAWN);
		if (autoCarTemplate.CarWithLootExists(map))
		{
			return;
		}
		
		array<Critter@> critters;
		map.GetCritters(0, FIND_LIFE, critters);
		if (critters.length() == 0)
		{
			StopEvent();
		}
	}
}

MinefieldEvent@ findEvent(Map& map)
{
	if (!valid(minefieldEvents))
	{
		initMinefieldEvents();
	}

	string@[] keys;
	minefieldEvents.keys(keys);

	for (uint i = 0; i < keys.length(); i++)
	{
		MinefieldEvent @event;
		
		if (minefieldEvents.get(keys[i], @event) && event.IsEventMap(map))
		{
			return event;
		}
	}
	
	return null;
}

void _MapInit(Map& map, bool firstTime)
{
	map.SetEvent(MAP_EVENT_OUT_CRITTER, "_MapCritterOut");
}

void _MapCritterOut(Map& map, Critter& cr)
{
	MinefieldEvent @event = findEvent(map);
	if (valid(event))
	{
		event.TryStopEvent();
	}
}