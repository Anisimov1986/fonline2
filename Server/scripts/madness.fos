#include "_msgstr.fos"
#include "_macros.fos"

#include "_defines.fos"
#include "pids_groups.fos"
#include "npc_planes_h.fos"
#include "_msgstr.fos"
import void AddNewMessage( string text,int time, int showtimer, uint color, bool eventtimer,uint eventid) from "stocmessages";
import int GetNextTime(uint Id) from "game_events";
import void HealCritter( Critter& cr ) from "stdlib";


void madness( Critter& cr, int , int , int )
{
	CreateTimeEvent(__FullSecond+REAL_SECOND(1), "e_event_start", 666, true);
	Location@[] locs;
    GetAllLocations( 0, locs );
    for( uint i = 0, j = locs.length(); i < j; i++ )
    {
        Location@   loc = locs[ i ];
        if (loc.IsTent())
		{
			/*
            loc.Visible=true;
			loc.Color = COLOR_YELLOW;
			loc.Update();
            */
		}
		else if (loc.IsBase())
		{
			/*
            loc.Visible=true;
			loc.Color = COLOR_BLUE;
			loc.Update();
            */
		}
		else if (loc.IsTown() && !loc.IsTC() && loc.GetProtoId() != LOCATION_Hub)
		{
			loc.Color=COLOR_DANGEROUS;
            for( uint i = 0, l = loc.GetMapCount(); i < l; i++ )
			{
				Map@ m = loc.GetMapByIndex( i );
				if( valid( m ) )
				{
					Critter@[] npcs;
					m.GetCritters(0, FIND_LIFE | FIND_ONLY_NPC, npcs);
					for (uint j = 0; j < npcs.length(); j++)
					{
						if(valid(npcs[j]))
						{
							npcs[j].ChangeCrType( 28 );
							npcs[j].StatBase[ ST_BASE_CRTYPE ] = 28;
							npcs[j].ModeBase[ MODE_NO_HOME ] = 0;
							npcs[j].StatBase[ST_BONUS_LOOK] = 100;
							npcs[j].StatBase[ ST_REPLICATION_TIME ] = 3;
							npcs[j].StatBase[ ST_MELEE_DAMAGE ] = 20;
							npcs[j].StatBase[ ST_CURRENT_HP ] = 500;
							npcs[j].StatBase[ ST_MAX_LIFE ] = 500;
							npcs[j].ModeBase[MODE_NO_ENEMY_STACK] = 1;	
							npcs[j].ModeBase[MODE_NO_LOOT] = 0;
							npcs[j].ModeBase[MODE_UNLIMITED_AMMO] = 0;
							npcs[j].ModeBase[MODE_NO_STEAL] = 0;
							npcs[j].ModeBase[MODE_NO_DROP] = 0;
							npcs[j].StatBase[ST_DIALOG_ID]  = 2059;
                            npcs[j].ParamBase[ ST_WALK_TIME ] = 800;
							AddRandomItem(npcs[j]);
							npcs[j].SetScript( "_Init" );
						}
					}
				}
			}
		}
		else if (loc.IsHotel())
		{
			DeleteLocation(loc.Id);
		}
    }
	Item@[] doors;
	uint count = GetAllItems( 0, doors );
    for( uint i = 0; i < count; i++ )
    {
        Item@ door = doors[ i ];
        if (valid(door) && door.GetType()==ITEM_TYPE_DOOR)
        {
			Map@ map = GetMap( door.MapId );
            if (valid(map) && (map.GetProtoId()==MAP_Prison_basement || map.GetProtoId()==MAP_Prison))
                continue;
            DeleteItem(door);
		}
	}
}

void AddRandomItem(Critter& cr)
{
	if (!valid(cr))
		return;
	int roll = Random(1,4);
	if (roll == 1)
		cr.AddItem(Pids_AllWeapon[Random(0,Pids_AllWeapon.length()-1)], 1);
	else if (roll==2)
		cr.AddItem(Pids_GAmmo[Random(0,Pids_GAmmo.length()-1)], 50);
	else if (roll==3)
		cr.AddItem(Pids_AllDrugs[Random(0,Pids_AllDrugs.length()-1)], 2);
	else if (roll==4 && Random(1,5)==5)
		cr.AddItem(Pids_AllArmor[Random(0,Pids_AllArmor.length()-1)], 1);
}


void madnessadjust( Critter& cr, int dmg, int , int)
{
	Critter@[] npcs;
    GetAllNpc( 0, npcs );
	for( uint i = 0, j = npcs.length(); i < j; i++ )
    {
		if (npcs[i].Stat[ ST_BASE_CRTYPE ] == 28)
			npcs[i].StatBase[ ST_MELEE_DAMAGE ] = dmg;
	}
}

void madnesstolife( Critter& cr, int , int , int)
{
	Critter@[] npcs;
    GetAllNpc( 0, npcs );
	for( uint i = 0; i < npcs.length(); i++ )
    {
		if (npcs[i].Stat[ ST_BASE_CRTYPE ] == 28)
		{
			Item@[] items;
			npcs[i].GetItems( -1, items );
			DeleteItems(items);
			AddRandomItem(npcs[i]);
			npcs[i].ToLife();
			npcs[i].StatBase[ ST_CURRENT_HP ] = 500;
			npcs[i].StatBase[ ST_MAX_LIFE ] = 500;
		}
	}
}

void madnessagro( Critter& cr, int , int , int)
{
	Critter@[] npcs;
    GetAllNpc( 0, npcs );
	for( uint i = 0, j = npcs.length(); i < j; i++ )
    {
		if (npcs[i].Stat[ ST_BASE_CRTYPE ] == 28)
			npcs[i].SetScript( "_AgroInit" );
	}
}

void madnesstopsagro( Critter& cr, int , int , int)
{
	Critter@[] npcs;
    GetAllNpc( 0, npcs );
	for( uint i = 0, j = npcs.length(); i < j; i++ )
    {
		if (npcs[i].Stat[ ST_BASE_CRTYPE ] == 28)
			npcs[i].SetEvent( CRITTER_EVENT_SHOW_CRITTER, "" );
	}
}

void _Init( Critter& cr, bool firstTime )
{
	cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_Show" );
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER_2, "_ShowFastAttack");
    cr.SetEvent( CRITTER_EVENT_RESPAWN, "_Respawn");
    cr.SetEvent(CRITTER_EVENT_DEAD, 	"_Dead");
}

void _Dead(Critter& mob, Critter@ killer)
{
    mob.ClearEnemyStack();
}

void _Respawn(Critter& mob)
{
    HealCritter( mob );
    array<Item@> items;
    int          count = mob.GetItems(-1, items);
    DeleteItems(items);
    AddRandomItem(mob);
}

void _ShowFastAttack( Critter& npc, Critter& player )
{
    if( not player.IsPlayer() )
        return;
    AddAttackPlane( npc, AI_PLANE_ATTACK_PRIORITY + 21, player );
}

void _Show( Critter& mob, Critter& cr )
{
	if( cr.IsPlayer() )
    {
		if(!mob.CheckEnemyInStack(cr.Id))
		{
			uint pr = AI_PLANE_ATTACK_PRIORITY;
			mob.AddEnemyInStack( cr.Id );
			AddAttackPlane( mob, Random(pr, pr + 20), cr );
		}
    }
}

uint e_event_start(array<uint>@ values)
{
	event_start(666);
	return REAL_MINUTE(5);
}

void event_start(uint id)
{
    int message=Random(1,5);
	if (message == 1)
		AddNewMessage( "~msg 72200",REAL_MINUTE(5), 0, getcolor(), true, id);
	else if (message == 2)
		AddNewMessage( "~msg 72201",REAL_MINUTE(5), 0, getcolor(), true, id);
	else if (message == 3)
		AddNewMessage( "~msg 72202",REAL_MINUTE(5), 0, getcolor(), true, id);
	else if (message == 4)
		AddNewMessage( "~msg 72203",REAL_MINUTE(5), 0, getcolor(), true, id);
    else if (message == 5)
		AddNewMessage( "~msg 72204",REAL_MINUTE(5), 0, getcolor(), true, id);
}

uint getcolor()
{
	int color=Random(1,3);
	if (color == 1)
		return COLOR_RED;
	else if (color == 2)
		return COLOR_WHITE;
	return  COLOR_YELLOW;
}