// Experimental evil npc random patrol script 

#include "_macros.fos"
#include "_npc_pids.fos"

#define ENTIRE_HEX (99)
#define CHANCE_TO_PATROL (40)
#define ROLE_PATROLNPC   (2)
import bool AddAttackPlane( Critter& npc, uint priority, Critter& target ) from "npc_planes";
import void AddAchievement(Critter& cr, uint achievement) from "achievements";
import void ChangeFactionScore(uint faction, int score) from "faction_core";

const uint16[] NpcForInit = {806,807,808,809,810,811,812,813,814,815,816,833,834};

//import void CheckNecropolis(Critter& critter) from "map_necropolis";
void CheckNecropolis(Critter& critter)
{
	if(valid(critter.GetMap()))
		return;
		
	Location@[] locations;
    GetLocations(critter.WorldX, critter.WorldY, 0, locations);
    
    if(locations.isEmpty() || locations[0].GetProtoId() != LOCATION_Necropolis)
		return;
		
	critter.ShowScreen(SCREEN_DIALOGBOX, 0, null);
	critter.SayMsg(SAY_DIALOGBOX_TEXT, TEXTMSG_TEXT, 71001);
	critter.Say(SAY_DIALOGBOX_BUTTON(0), "OK");
}

void _NecropolisInit( Map& map, bool firstTime )
{
    if( firstTime )
    {
		bool noloot=false;
        if (map.GetProtoId()==MAP_necro_vault || map.GetProtoId()==MAP_necro_vault2 || map.GetProtoId()==MAP_necro_vault3)
            noloot=true;
        for (uint i=0; i<NpcForInit.length();i++)
		{
			Critter@[] critters;
			if (map.GetCritters( NpcForInit[i], FIND_LIFE_AND_KO | FIND_ONLY_NPC, critters ) > 0 )
			{
				for (uint j=0; j<critters.length();j++)
                {
					critters[j].SetScript( "_NpcInit" );
                    if (noloot)
                    {
                        critters[j].ModeBase[ MODE_NO_LOOT ]=1;
                        critters[j].ModeBase[ MODE_NO_DROP ]=1;
                        critters[j].ModeBase[ MODE_NO_LOOSE_LIMBS ]=1;
                        critters[j].ModeBase[ MODE_NO_STEAL]=1;
                        critters[j].ModeBase[ MODE_UNLIMITED_AMMO]=1;
                    }
                    
                }
			}
		}
		uint entiresnum = map.CountEntire(99);
		if (entiresnum>58)
			Log("Necropolis init error");
		uint16 hexX=0;
		uint16 hexY=0;
		for (uint8 i=0; i<entiresnum;i++)
		{
			map.GetEntireCoords (ENTIRE_HEX, i, hexX, hexY);
			Critter@ cr = map.GetCritter(hexX, hexY);
			if (valid(cr))
			{
				cr.SetHomePos (hexX, hexY, Random(0,5));
				map.SetData(i,1);
			}
		
		}
	}
}

void _NpcInit( Critter& cr, bool firstTime )
{
    cr.StatBase[ ST_REPLICATION_TIME ]=10;
    cr.SetBagRefreshTime(10);
    cr.SetEvent( CRITTER_EVENT_SHOW_CRITTER, "_DeathShowCritter" );
    if (cr.StatBase[ ST_NPC_ROLE ] == ROLE_PATROLNPC)
        cr.SetEvent( CRITTER_EVENT_IDLE, "_RandomPatrol" );
	
    if (cr.StatBase[ ST_NPC_ROLE ] == 8888)
        cr.SetEvent( CRITTER_EVENT_DEAD,        "_BossDeath" );
}

// BOSS DEATH
void _BossDeath( Critter& npc, Critter@ killer )
{
	if (!valid(killer))
		return;
	AddAchievement(killer,PE_ACHIEV_ZED_KILLED);
    if (killer.Param[MAIN_FACTION]!=0)
        ChangeFactionScore(killer.Param[MAIN_FACTION], 100);
}

void _DeathShowCritter( Critter& deathclaw, Critter& cr )
{
    if( cr.IsPlayer() )
    {
		deathclaw.AddEnemyInStack( cr.Id );
        AddAttackPlane( deathclaw, 0, cr );
    }
}

void t_Jeronimo( Critter& player, Scenery& trigger, bool entered, uint8 dir )
{
	if (player.IsNpc())
        return;
    
    Map@ map = GetMapByPid (MAP_necro_sewers,0);
	if (!valid(map))
		return;
	uint entiresnum = map.CountEntire(136);
	if (entiresnum<1)
		return;
	uint16 hexX=0;
	uint16 hexY=0;
	map.GetEntireCoords (136, Random(0,entiresnum-1), hexX, hexY);
	if (player.TransitToMap (map.Id, hexX, hexY, Random(0,5)))
	{
		player.StatBase[ ST_CURRENT_HP ] -= 100;
		if( player.Stat[ ST_CURRENT_HP ] > __DeadHitPoints )
		{
			if (!player.IsKnockout())
			{
				player.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 0, player.HexX, player.HexY );
				player.StatBase[ ST_CURRENT_AP ] = -1000;
			}
		}
		else
		{
			player.ToDead( ANIM2_DEAD_BACK, null );
			player.RefreshVisible();
		}
	}
}

void _RandomPatrol ( Critter& cr )
{	

	//cr.Say( SAY_NORM_ON_HEAD , "Idling" );
	if (Random (1,100) < CHANCE_TO_PATROL )
	{
		Map@ map = cr.GetMap();
		uint entiresnum = map.CountEntire(99);
		uint16 hexX=0;
		uint16 hexY=0;
		uint mapId;
		uint8 dir;
		cr.GetHomePos (mapId , hexX, hexY, dir);
		uint8[] entires;
		for (uint8 i=0; i<entiresnum;i++)
		{
			uint16 hexX2=0;
			uint16 hexY2=0;
			map.GetEntireCoords (ENTIRE_HEX, i, hexX2, hexY2);
			if (hexX==hexX2 && hexY==hexY2)
			{
				//Log("HomeEntireNum="+i);
				map.SetData(i,0);
				for (uint j=0; j<entiresnum;j++)
				{
					if (map.GetData(j)==0)
						entires.insertLast( j );
				}
				uint8 newentire=entires[Random(0,entires.length()-1)];
				//Log("NewPositionEntire"+newentire);
				map.GetEntireCoords (ENTIRE_HEX, newentire, hexX, hexY);
				map.SetData(newentire,1);
				cr.SetHomePos (hexX, hexY, Random(0,5));
				//Log("Heading to pos="+hexX+","+hexY);
				return;
			}
		}
	}
}
