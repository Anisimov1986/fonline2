// Author: cvet
#include "_macros.fos"
#include "_msgstr.fos"


#ifdef __CLIENT
# include "_client_defines.fos"

import void SetChosenTabLevelUp( bool enable )  from "chosen_tabs";
import int  GUI_GetActiveScreen() from "client_gui";
#endif

#ifndef __CLIENT
import void SpecialMessage(Critter& cr, uint title, uint message, uint file, uint titlecolor, uint messagecolor) from "utils";
import void PerkUp( Critter& cr, uint perk ) from "perks";
import void PerkDown( Critter& cr, uint perk ) from "perks";
import void CrSpeedCalc(Critter& cr) from "main";
import void AddAchievement(Critter& cr, uint achievement) from "achievements";
#endif

# ifndef __CLIENT
# include "logging_h.fos"
import string GetIP(uint ip) from "utils";
void changedParam_Hp( Critter& cr, uint, int oldValue )
{
    int curHp = cr.StatBase[ ST_CURRENT_HP ];
    if( curHp <= 0 && cr.IsLife() )
        cr.StatBase[ ST_CURRENT_HP ] = 1;
    if( curHp < __DeadHitPoints && not cr.IsDead() )
        cr.StatBase[ ST_CURRENT_HP ] = __DeadHitPoints + 1;
	int maxHp = cr.Stat[ST_MAX_LIFE];
    if (cr.IsPlayer() && (maxHp>550))
        FLog( LOG_GM, cr.Name + " (" + cr.Id + ") access level " + cr.GetAccess() + " have max hp "+maxHp+" from ip: " + GetIP( cr.GetIp() ));
    
    if(curHp > maxHp)
    {
        cr.StatBase[ST_CURRENT_HP] = maxHp;
        curHp = maxHp;
    }
	/* set health level */
    if(cr.IsDead())
        cr.StatBase[ST_HEALTH_LEVEL] = -1024;
    else if(curHp == maxHp)
        cr.StatBase[ST_HEALTH_LEVEL] = 4;
    else
        cr.StatBase[ST_HEALTH_LEVEL] = (3 * curHp) / maxHp + 1;
}

void changedParam_closecombat( Critter& cr, uint, int oldValue )
{
    if (cr.IsPlayer() && cr.Skill[SK_UNARMED]>103)
		CrSpeedCalc(cr);
}
void changedParam_Experience( Critter& cr, uint, int oldValue )
{
    int exp = cr.StatBase[ ST_EXPERIENCE ] - oldValue;
    if( exp > 0 )
    {
        uint level = cr.Stat[ ST_LEVEL ];
        if( cr.Mode[ MODE_NO_LEVEL_CAP ] == 0 && level >= __LevelCap && not __LevelCapAddExperience )
            return;

        exp += exp * ( cr.Perk[ PE_SWIFT_LEARNER ] * 10 ) / 100; // SwiftLearner perk
        cr.StatBase[ ST_EXPERIENCE ] = oldValue + exp;

		if( cr.Mode[ MODE_NO_LEVEL_CAP ] == 0 && level >= __LevelCap )
            return;

        int perkUp = 3 ;
        while( true )
        {
            if( cr.StatBase[ ST_EXPERIENCE ] >= NextLevelNeedExp( cr ) )
            {
                level++;
                cr.StatBase[ ST_LEVEL ]++;
				if (uint( cr.Stat[ ST_LEVEL ]) >= __LevelSoftCap)
					AddAchievement(cr,PE_AWARENESS);
				if( __LevelSoftCap == 0 || uint( cr.Stat[ ST_LEVEL ] ) <= __LevelSoftCap )
				{
					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5 + cr.StatBase[ ST_INTELLECT ] * 2;                        // Skill points
					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += cr.Perk[ PE_EDUCATED ] * 2;                                 // Educated perk
				}
				else 
				{
					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 2 + cr.StatBase[ ST_INTELLECT ];  
					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += cr.Perk[ PE_EDUCATED ]; 
				}
                if( cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] > 99 )
                    cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] = 99;                                                      // Clamp skill points
                if( __LevelSoftCap == 0 || uint( cr.Stat[ ST_LEVEL ] ) <= __LevelSoftCap )
				{
					cr.StatBase[ ST_MAX_LIFE ] += 2 + cr.StatBase[ ST_ENDURANCE ] / 2 + ((cr.StatBase[ ST_ENDURANCE ]%2)*(cr.StatBase[ ST_LEVEL ]%2));  // Add max hp
					if( cr.Stat[ ST_UNSPENT_PERKS ]!=0 && ( (level+1) % perkUp ) == 0 && level != __LevelSoftCap )
					{
						SpecialMessage(cr, 70358, 70359, TEXTMSG_TEXT, COLOR_RED, COLOR_LGRAY);
					}
					if( ( level % perkUp ) == 0 )
					{
						cr.StatBase[ ST_UNSPENT_PERKS ] = 1;
					}
				}
				else if (cr.StatBase[ ST_LEVEL ]%2 == 0)
				{	
					cr.StatBase[ ST_MAX_LIFE ] += 1;
				}
				
            }
            else
                break;
        }
    }
}

void changedParam_Perks( Critter& cr, uint perk, int oldValue )
{
    int curValue = cr.Param[ perk ];
    if( curValue > oldValue )
        for( uint i = 0, j = curValue - oldValue; i < j; i++ )
            PerkUp( cr, perk );
    else if( curValue < oldValue )
        for( uint i = 0, j = oldValue - curValue; i < j; i++ )
            PerkDown( cr, perk );
	
	if(oldValue != curValue && cr.IsPlayer())
        FLog(LOG_PERKS, cr.Name + "(" + cr.Id + ") changing perk " + perk + " value: " + oldValue + " -> " + curValue);
}

void changedParam_Hide( Critter& cr, uint, int oldValue )
{
    cr.RefreshVisible();
}

void changedParam_FastShot( Critter& cr, uint, int oldValue )
{
    cr.ModeBase[ MODE_NO_AIM ] = ( cr.Trait[ TRAIT_FAST_SHOT ] != 0 ? 1 : 0 );
}

int NextLevelNeedExp( Critter& cr ) // Export
{
    int level = cr.Stat[ ST_LEVEL ];
    return NUMERICAL_NUMBER( level ) * 1000;
}

int getParamDialog_Intellect( Critter@ master, Critter@ slave, uint index )
{
    if( valid( master ) )
        return master.Stat[ ST_INTELLECT ] + 2 * master.Perk[ PE_SMOOTH_TALKER ];
    return 0;
}

int getParamDialog_Reputation( Critter@ master, Critter@ slave, uint index )
{
    if( valid( master ) )
    {
        if( master.ReputationBase[ index ] == int(0x80000000) )
            master.ReputationBase[ index ] = 0;
        return master.ReputationBase[ index ];
    }
    return 0;
}
#endif

#ifdef __CLIENT
void changedParam_Level( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_LEVEL ] > oldValue )
    {
        PlaySound( "LEVELUP.ACM" );
        Message( TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME );
        SetChosenTabLevelUp( true );
    }
}

void changedParam_Experience( CritterCl& cr, uint, int oldValue )
{
    int curValue = cr.ParamBase[ ST_EXPERIENCE ];
    if( curValue > oldValue )
        Message( ReplaceText( GetMsgStr( TEXTMSG_GAME, STR_GAIN_EXPERIENCE ), "VALUE", curValue - oldValue ), FOMB_GAME );
}

void changedParam_UnspentPerks( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_UNSPENT_PERKS ] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER )
        ShowScreen( CLIENT_SCREEN_PERK, 0, 0, 0 );
}
#endif

/*#ifdef __CLIENT Good/Evil system, not used
   

   void changedParam_GoodEvilList(CritterCl& chosen, uint index, int oldValue)
   {
        if(chosen.IsChosen())
        {
                if(oldValue!=0)
                {
                        int id=oldValue&0x7FFFFFFF;
                        CritterCl@ cr=::GetCritter(id);
                        if(valid(cr))
                        {
                                cr.NameColor=COLOR_CRITTER_NAME;
                                cr.ContourColor=COLOR_CONTOUR_YELLOW;
                        }
                }

                if(chosen.GoodEvilList[index]!=0)
                {
                        int id=chosen.GoodEvilList[index];
                        bool isEvil=FLAG(id,0x80000000);
                        if(isEvil) id^=0x80000000;
                        CritterCl@ cr=::GetCritter(id);
                        if(valid(cr))
                        {
                                cr.NameColor=(isEvil?COLOR_RED:COLOR_GREEN);
                                cr.ContourColor=(isEvil?COLOR_CONTOUR_RED:COLOR_CONTOUR_GREEN);
                        }
                }
        }
   }
 #endif*/


// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype
#ifndef __CLIENT
# define _param_    cr.ParamBase
void CritterGenerate( Critter& cr ) // Export to main@critter_init
#endif
#ifdef __CLIENT
# define _param_    data
void CritterGenerate( int[]& data ) // Export to client_main@player_data_generate
#endif
{
    if( _param_[ ST_LEVEL ] <= 0 )
        _param_[ ST_LEVEL ] = 1;

    if( _param_[ TRAIT_SMALL_FRAME ] != 0 )
        _param_[ ST_AGILITY ] += 1;
    if( _param_[ TRAIT_BRUISER ] != 0 )
	{
        _param_[ ST_STRENGTH ] += 2;
		_param_[ ST_MELEE_DAMAGE ] += 8;
	}
    if( _param_[ TRAIT_GOOD_NATURED ] != 0 )
    {
        _param_[ SK_FIRST_AID ] += 15;
        _param_[ SK_DOCTOR ] += 15;
        _param_[ SK_SPEECH ] += 15;
        _param_[ SK_BARTER ] += 15;
        _param_[ SK_SMALL_GUNS ] -= 10;
        _param_[ SK_BIG_GUNS ] -= 10;
        _param_[ SK_ENERGY_WEAPONS ] -= 10;
        _param_[ SK_UNARMED ] -= 10;
        _param_[ SK_THROWING ] -= 10;
    }
    if( _param_[ TRAIT_EVADER ] != 0 )
        _param_[ ST_ENDURANCE ] -= 2;
    
	if( _param_[ TRAIT_BONEHEAD ] != 0 )
    {
#ifdef __SERVER        
        if (_param_[ ST_INTELLECT ] < 2)
            _param_[ TRAIT_BONEHEAD ] = 0;
#endif
        _param_[ ST_INTELLECT ] -= 1;
    }
    
#ifdef __SERVER  
    if( _param_[ TRAIT_CHEM_RELIANT ] != 0 &&  _param_[ TRAIT_CHEM_RESISTANT ] != 0 )
    {
        _param_[ TRAIT_CHEM_RELIANT ] = 0;
        _param_[ TRAIT_CHEM_RESISTANT ] = 0;
    }
#endif

    _param_[ SK_SMALL_GUNS ] += 5 + 4 * _param_[ ST_AGILITY ];
    _param_[ SK_BIG_GUNS ] += 0 + 2 * _param_[ ST_AGILITY ];
    _param_[ SK_ENERGY_WEAPONS ] += 0 + 2 * _param_[ ST_AGILITY ];
    _param_[ SK_UNARMED ] += 30 + 2 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_THROWING ] += 0 + 4 * _param_[ ST_AGILITY ];
    _param_[ SK_FIRST_AID ] += 0 + 2 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ] );
    _param_[ SK_DOCTOR ] += 5 + _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ];
    _param_[ SK_SNEAK ] += 5 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_LOCKPICK ] += 10 + _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ];
    _param_[ SK_STEAL ] += 0 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_TRAPS ] += 10 + _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ];
    _param_[ SK_SCIENCE ] += 0 + 4 * _param_[ ST_INTELLECT ];
    _param_[ SK_REPAIR ] += 0 + 3 * _param_[ ST_INTELLECT ];
    _param_[ SK_SPEECH ] += 0 + 5 * _param_[ ST_CHARISMA ];
    _param_[ SK_BARTER ] += 0 + 4 * _param_[ ST_CHARISMA ];
    _param_[ SK_GAMBLING ] += 0 + 5 * _param_[ ST_LUCK ];
    _param_[ SK_OUTDOORSMAN ] += 0 + 2 * ( _param_[ ST_ENDURANCE ] + _param_[ ST_INTELLECT ] );

    if( _param_[ TAG_SKILL1 ] != 0 )
        _param_[ _param_[ TAG_SKILL1 ] ] += 20;
    if( _param_[ TAG_SKILL2 ] != 0 )
        _param_[ _param_[ TAG_SKILL2 ] ] += 20;
    if( _param_[ TAG_SKILL3 ] != 0 )
        _param_[ _param_[ TAG_SKILL3 ] ] += 20;

    if( _param_[ TRAIT_FAST_METABOLISM ] != 0 )
    {
        _param_[ ST_RADIATION_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 2;
        _param_[ ST_POISON_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 5;
        _param_[ ST_HEALING_RATE ] += 10;
    }
    //if( _param_[ TRAIT_BRUISER ] != 0 )
    //    _param_[ ST_ACTION_POINTS ] -= 2;
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MELEE_DAMAGE ] += 4;
    if( _param_[ TRAIT_FINESSE ] != 0 )
        _param_[ ST_CRITICAL_CHANCE ] += 10;
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MAX_CRITICAL ] -= 30;
    if( _param_[ TRAIT_FAST_SHOT ] != 0 )
        _param_[ MODE_NO_AIM ] = 1;
	if( _param_[ TRAIT_MUTATED ] != 0 )
	{
		_param_[ ST_NORMAL_ABSORB  ] +=  2;
		_param_[ ST_FIRE_ABSORB    ] +=  1;
		_param_[ ST_ELECTRO_ABSORB ] +=  2;
		_param_[ ST_EXPLODE_ABSORB ] +=  5;
		_param_[ ST_NORMAL_RESIST  ] +=  5;
		_param_[ ST_FIRE_RESIST    ] +=  20;
		_param_[ ST_ELECTRO_RESIST ] +=  20;
		_param_[ ST_EXPLODE_RESIST ] +=  15;
		_param_[ ST_ANTICRIT ] +=  10;
		_param_[ SK_OUTDOORSMAN ] +=  100;
		_param_[ ST_MAX_LIFE ] +=  100;
        _param_[ ST_MELEE_DAMAGE ] += 10;
	
	}

    #ifdef __CLIENT
    // Runtime calculations, only for client registration
    _param_[ ST_ARMOR_CLASS ] += _param_[ ST_AGILITY ];
    _param_[ ST_MAX_LIFE ] += _param_[ ST_STRENGTH ] + _param_[ ST_ENDURANCE ] * 2;
    _param_[ ST_ACTION_POINTS ] += _param_[ ST_AGILITY ] / 2;
    _param_[ ST_CARRY_WEIGHT ] += LBS_TO_GRAMM( 45 + _param_[ ST_STRENGTH ] * ( 25 - _param_[ TRAIT_SMALL_FRAME ] * 10 ) );
	_param_[ ST_MELEE_DAMAGE ] += _param_[ ST_STRENGTH ] ;
    _param_[ ST_POISON_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 5;
    _param_[ ST_RADIATION_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 2;
    _param_[ ST_SEQUENCE ] += _param_[ ST_PERCEPTION ] * 2;
    _param_[ ST_HEALING_RATE ] += MAX( 1, _param_[ ST_ENDURANCE ] / 3 );
    _param_[ ST_CRITICAL_CHANCE ] += _param_[ ST_LUCK ];
    #endif

    _param_[ ST_MAX_LIFE ] += 55;
    _param_[ ST_ACTION_POINTS ] += 5;
    _param_[ ST_CURRENT_HP ] = _param_[ ST_MAX_LIFE ];
    _param_[ ST_CURRENT_AP ] = _param_[ ST_ACTION_POINTS ] * 100;
	_param_[ ST_HEALTH_LEVEL ] = 4;
}

#ifdef __CLIENT
# include "_msgstr.fos"
// Check valid of input data
bool CritterGenerateCheck( int[]& data ) // Export to client_main@player_data_check
{
    // Check special
    int special = 0;
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
    {
        if( data[ i ] < 1 || data[ i ] > 10 || (i == ST_INTELLECT && data[ i ]==1 && data[ TRAIT_BONEHEAD ]!=0) )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
            return false;
        }
        special += data[ i ];
    }
    if( special != __StartSpecialPoints )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
        return false;
    }

    // Check choosed tag skills
    if( ( data[ TAG_SKILL1 ] < int(SKILL_BEGIN) || data[ TAG_SKILL1 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL2 ] < int(SKILL_BEGIN) || data[ TAG_SKILL2 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL3 ] < int(SKILL_BEGIN) || data[ TAG_SKILL3 ] > int(SKILL_END) ) )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL ) );
        return false;
    }
    return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel( Critter& npc ) // Export
{
    for( int i = 0, j = npc.Stat[ ST_LEVEL ]; i < j; i++ )
    {
        // Todo: ...
        // npc.StatBase[ST_MAX_LIFE]+=10;
    }
}
#endif

uint CheckPlayerName( const string& name )
{
    // Length
    if( name.length() < __MinNameLength || name.length() > __MaxNameLength )
        return STR_NET_LOGINPASS_WRONG;
		
	if( strlwr(name)=="admin" || strlwr(name)=="cvet")
        return STR_NET_LOGINPASS_WRONG;

    // Valid letters
    string allLetters = __ValidNameLettersCommon + __ValidNameLettersCulture1 + __ValidNameLettersCulture2;
    for( uint i = 0, j = name.length(); i < j; i++ )
        if( findFirst( allLetters, name[ i ] ) == -1 )
            return STR_NET_PASS_WRONG_CHARS;

    // Spaces
    if( name[ 0 ] == " " || name[ -1 ] == " " )
        return STR_NET_BEGIN_END_SPACES;
    for( int i = 0, j = name.length(); i < j; i++ )
        if( name[ i ] == " " && name[ i + 1 ] == " " )
            return STR_NET_TWO_SPACE;

    // Different cultures
    uint letters1 = 0;
    uint letters2 = 0;
    for( int i = 0, j = name.length(); i < j; i++ )
    {
        if( findFirst( __ValidNameLettersCulture1, name[ i ] ) != -1 )
            letters1++;
        else if( findFirst( __ValidNameLettersCulture2, name[ i ] ) != -1 )
            letters2++;
	
    }
    if( letters1 > 0 && letters2 > 0 )
        return STR_NET_DIFFERENT_LANG;

    // Too many common symbols
    if( ( letters1 + letters2 ) * 100 / name.length() < 70 )
        return STR_NET_MANY_SYMBOLS;

    // All fine, return zero
    return 0;
}
