#include "_macros.fos"

#include "admin_h.fos"
#include "loot_items.fos"
#include "stdlib_h.fos"
#include "_teams.fos"
#include "utils_h.fos"

import void ChangeFactionRank(uint id,uint newrank, bool update) from "faction_core";
import void JoinFaction(uint id,uint faction,uint rank, bool update) from "faction_core";
import bool QuitFaction(uint id) from "faction_core";
import void AddNewMessage( string text,int time, int showtimer, uint color , int factionmessage) from "stocmessages";
/**
* Run script functions
*/
void SetFaction(Critter& cr, int critterId, int faction, int)
{
	Critter@ critter = GetCritter(critterId);
	if(!valid(critter))
		return;
	if (QuitFaction(critter.Id))
        JoinFaction(critter.Id,faction,FACTION_RANK_MEMBER,true);
}

/**
* Server scripts
*/
void ShowFactionMenu(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	string@ menuItems = "";
	switch(actionType)
	{
		case ACTION_TYPE_CRITTER:
			menuItems += "Set faction:faction@ShowSetFactionMenu;";
			menuItems += "Add items:faction@ShowAddItemsMenu;";
			break;
		case ACTION_TYPE_ITEM:
			break;
		case ACTION_TYPE_HEX:
			menuItems += "Show location:faction@OpenLocationFactionMenu;";
			break;
	}
	menuItems += "Send message:faction@ShowSendMessageFactionMenu;";
	ShowAdminMenu(critter, actionType, menuItems, values);
}

void ShowSetFactionMenu(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	if(actionType != ACTION_TYPE_CRITTER)
		return;
	string@ menuItems = "";
	menuItems += "Junktown:faction@SetFaction$" + FACTION_Junktown + ";";
	menuItems += "Raiders:faction@SetFaction$" + FACTION_Raiders + ";";
	menuItems += "BOS:faction@SetFaction$" + FACTION_BrotherhoodOfSteel + ";";
	menuItems += "Enclave:faction@SetFaction$" + FACTION_Enclave + ";";
	menuItems += "None:faction@SetFaction$" + FACTION_None + ";";
	ShowAdminMenu(critter, actionType, menuItems, values);
}

void SetFaction(Critter& player, int actionType, int, int, string@, int[]@ values)
{
	if(actionType != ACTION_TYPE_CRITTER)
		return;
	Critter@ critter = GetCritter(values[0]);
	if(!valid(critter))
		return;
		
	if (QuitFaction(critter.Id))
        JoinFaction(critter.Id,values[1],FACTION_RANK_MEMBER,true);
}

void ShowAddItemsMenu(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	if(actionType != ACTION_TYPE_CRITTER)
		return;
	string@ menuItems = "";
	menuItems += "Junktown scout:faction@AddItems$0;";
	menuItems += "Junktown guard:faction@AddItems$1;";
	ShowAdminMenu(critter, actionType, menuItems, values);
}

LootDefinition@[] ItemDefinitions = 
{
	LootDefinition()
		.AddItem(PID_LEATHER_ARMOR_MK_II, 1)
		.AddItem(PID_DESERT_EAGLE_EXT_MAG, 1)
		.AddItem(PID_44_FMJ_MAGNUM, 100)
		.AddItem(PID_ASSAULT_RIFLE, 1)
		.AddItem(PID_5MM_JHP, 200)
		.AddItem(PID_STIMPAK, 5),
	LootDefinition()
		.AddItem(PID_LEATHER_ARMOR_MK_II, 1)
		.AddItem(PID_SNIPER_RIFLE, 1)
		.AddItem(PID_223_FMJ, 50)
		.AddItem(PID_STIMPAK, 3)
};

void AddItems(Critter& player, int actionType, int, int, string@, int[]@ values)
{
	if(actionType != ACTION_TYPE_CRITTER)
		return;
	Critter@ critter = GetCritter(values[0]);
	if(!valid(critter))
		return;
		
	LootDefinition@ loot = ItemDefinitions[values[1]];
	if(valid(loot))
		loot.AddItems(critter);
}

void ShowFactionList(Critter& critter, int actionType, int[]@ values, string actionScript)
{
	string@ menuItems = "";
	menuItems += "Junktown:faction@" + actionScript + "$" + FACTION_Junktown + ";";
	menuItems += "Raiders:faction@" + actionScript + "$" + FACTION_Raiders + ";";
	menuItems += "BOS:faction@" + actionScript + "$" + FACTION_BrotherhoodOfSteel + ";";
	menuItems += "Enclave:faction@" + actionScript + "$" + FACTION_Enclave + ";";
	menuItems += "NcrArmy:faction@" + actionScript + "$" + FACTION_NcrArmy + ";";
	menuItems += "NcrRangers:faction@" + actionScript + "$" + FACTION_NcrRangers + ";";
	ShowAdminMenu(critter, actionType, menuItems, values);
}

void ShowSendMessageFactionMenu(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	ShowFactionList(critter, actionType, values, "SendFactionMessage");
}

void SendFactionMessage(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	ShowSayScreen(critter, false, false, "Message", "", "faction@unsafe_FactionMessage", values);
}

void unsafe_FactionMessage(Critter& critter, int actionType, int, int, string@ message, int[]@ values)
{
	if (!valid(values))
		return;
	AddNewMessage( message,REAL_SECOND(30), 0, COLOR_WHITE , values[values.length()-1]);
}

void OpenLocationFactionMenu(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	ShowFactionList(critter, actionType, values, "OpenLocation");
}

void OpenLocation(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	if(actionType != ACTION_TYPE_HEX)
		return;
	
	Map@ map = critter.GetMap();
	if(!valid(map))
		return;
	Location@ location = map.GetLocation();
	if(!valid(location))
		return;
	
	Critter@[] players;
	GetAllPlayers(players);
	for (uint i = 0; i < players.length(); i++)
	{
		if(valid(players[i]) && _CritIsOnline(players[i]) && players[i].Param[MAIN_FACTION] == values[2])
			players[i].SetKnownLoc(true, location.Id);
	}
	players.resize( 0 );
}

void JoinEnclave(Critter& player, Critter@ npc)
{
	if (valid(player) && player.Param[MAIN_FACTION]==0)
		JoinFaction(player.Id,FACTION_Enclave,FACTION_RANK_MEMBER,true);
}

void JoinBos(Critter& player, Critter@ npc)
{
	if (valid(player) && player.Param[MAIN_FACTION]==0)
		JoinFaction(player.Id,FACTION_BrotherhoodOfSteel,FACTION_RANK_MEMBER,true);
}


void LeaveBos(Critter& player, Critter@ npc)
{
	if (valid(player) && player.Param[MAIN_FACTION]==FACTION_BrotherhoodOfSteel)
		QuitFaction(player.Id);
}

void LeaveEnclave(Critter& player, Critter@ npc)
{
	if (valid(player) && player.Param[MAIN_FACTION]==FACTION_Enclave)
		QuitFaction(player.Id);
}

uint DetermineAction2(uint faction1, uint faction2)
{
	if (faction1 == faction2)
		return ACTION_NONE;

	if (faction1 == FACTION_Raiders || faction1 == FACTION_Enclave)
		return ACTION_FIGHTING;
	if (faction2 == FACTION_Raiders || faction2 == FACTION_Enclave)
		return ACTION_FIGHTING;		

	return ACTION_NONE;
}
