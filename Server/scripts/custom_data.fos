#include "serializator.fos"
#include "_macros.fos"
#include "combat_h.fos"
#include "custom_data_h.fos"
#include "utils_for_array.fos"

#define	OFFENCE_DECREASE_INTERVAL	(REAL_MINUTE(10))
#define	DEFAULT_DECREASE_SEVERITY	(1)

import bool IsKeyAviable( Critter& cr, uint lockerId, bool toDelete ) from "lockers";
import bool IsCarTrunk(Item@ item) from "car";
import bool IsCar(Item@ item) from "car";

//import bool IsProtectedFromAttacker(Critter& critter, Critter& attacker) from "custom_data";
bool IsProtectedFromAttacker(Critter& critter, Critter& attacker)
{
	uint8 weaponMode = 0;
	ProtoItem@ proto = attacker.GetSlotProto(SLOT_HAND1, weaponMode);
	uint8 use = _WeaponModeUse(weaponMode);
	
	return IsProtectedFromAttack(critter, _WeaponSubType(proto, use), _WeaponDmgType(proto, use), _WeaponRound(proto, use) > 1);
}

//import bool IsProtectedFromAttack(Critter& critter, uint8 weaponSubType, uint8 damageType, bool isBurst) from "custom_data";
bool IsProtectedFromAttack(Critter& critter, uint8 weaponSubType, uint8 damageType, bool isBurst)
{
	Synchronize();
	
	AttackProtectionInfo@ info = AttackProtectionInfo(critter);
	bool isProtected = false;
	if(!isBurst && info.IsProtected(ATTACK_PROTECTION_SINGLE_SHOT) && weaponSubType == WS_GUN)
		isProtected = true;
	else if(isBurst && info.IsProtected(ATTACK_PROTECTION_BURST))
		isProtected = true;
	else if(damageType == DAMAGE_EXPLODE && info.IsProtected(ATTACK_PROTECTION_EXPLODE))
		isProtected = true;
	else if(isGrenade(weaponSubType, damageType) && info.IsProtected(ATTACK_PROTECTION_GRENADE))
		isProtected = true;
	else if(weaponSubType == WS_UNARMED && info.IsProtected(ATTACK_PROTECTION_UNARMED))
		isProtected = true;
	else if(weaponSubType == WS_MELEE && info.IsProtected(ATTACK_PROTECTION_MELEE))
		isProtected = true;
	else if(damageType == DAMAGE_FIRE && info.IsProtected(ATTACK_PROTECTION_FLAME))
		isProtected = true;
	else if(weaponSubType == WS_THROWING && info.IsProtected(ATTACK_PROTECTION_THROWING))
		isProtected = true;

	Resynchronize();
	return isProtected;
}

//import bool IsProtectedFromHexAttack(Critter& critter, uint8 hexX, uint8 hexY) from "custom_data";
bool IsProtectedFromHexAttack(Critter& critter, uint8 hexX, uint8 hexY)
{
	Synchronize();
	
	//TODO: get critters around critter and ask them about protection
	AttackProtectionInfo@ info = AttackProtectionInfo(critter);
	bool isProtected = info.IsProtected(ATTACK_PROTECTION_HEX_ATTACK);
	
	Resynchronize();
	return isProtected;
}

//import void AddAttackProtection(Critter@ protector, Critter& critter, uint protectionFlags) from "custom_data";
void AddAttackProtection(Critter@ protector, Critter& critter, uint protectionFlags)
{
	if(protectionFlags == 0)
		return;
		
	Synchronize();
	
	//Log("Adding attack protection on: "+critter.Id);
	AttackProtectionInfo@ info = AttackProtectionInfo(critter);
	info.AddProtection(protector, protectionFlags);
	
	Resynchronize();
}

//import void RemoveAttackProtection(Critter@ protector, Critter& critter, uint protectionFlags) from "custom_data";
void RemoveAttackProtection(Critter@ protector, Critter& critter, uint protectionFlags)
{
	Synchronize();
	
	//Log("Removing attack protection on: "+critter.Id);
	AttackProtectionInfo@ info = AttackProtectionInfo(critter);
	info.RemoveProtection(protector, protectionFlags);
	
	Resynchronize();
}

//import void ClearAttackProtection(Critter& critter) from "custom_data";
void ClearAttackProtection(Critter& critter)
{
	Synchronize();
	
	//Log("Clearing attack protection on: "+critter.Id);
	AttackProtectionInfo@ info = AttackProtectionInfo(critter);
	info.ClearProtection();
	
	Resynchronize();
}

//import uint GetAttackProtectionCount(Critter& critter) from "custom_data";
uint GetAttackProtectionCount(Critter& critter)
{
	Synchronize();

	AttackProtectionInfo@ info = AttackProtectionInfo(critter);
	uint protectionCount = info.GetProtectionCount();
	
	Resynchronize();
	return protectionCount;
}

bool isGrenade(uint8 weaponSubType, uint8 damageType)
{
	if(weaponSubType == WS_THROWING && (damageType == DAMAGE_PLASMA || damageType == DAMAGE_EMP || damageType == DAMAGE_EXPLODE))
		return true; // all kinds of grenade
	
	return false;
}

class AttackProtectionInfo : AbstractProtectionInfo
{
	AttackProtectionInfo(Critter@ critter)
	{
		super("AttackProtection", @critter);
	}
}

//import bool IsProtectedFromSkill(Critter& critter, int skill, Critter@ targetCritter, Item@ targetItem, Scenery@ targetScenery) from "custom_data";
bool IsProtectedFromSkill(Critter& critter, int skill, Critter@ targetCritter, Item@ targetItem, Scenery@ targetScenery)
{
	Synchronize();
	
	SkillProtectionInfo@ info = SkillProtectionInfo(critter);
	bool isProtected = false;
	
	if((skill == SKILL_LOOT_CRITTER || (skill == SK_STEAL && valid(targetCritter) && !targetCritter.IsLife()))
				&& info.IsProtected(SKILL_PROTECTION_LOOT))
		isProtected = true;
	else if(skill == SK_LOCKPICK && info.IsProtected(SKILL_PROTECTION_LOCKPICK))
		isProtected = true;
	else if(skill == SKILL_PICK_ON_GROUND && (IsCar(targetItem) || IsCarTrunk(targetItem))
				&& !IsKeyAviable(critter, targetItem.LockerId, false) && info.IsProtected(SKILL_PROTECTION_USE_CAR))
		isProtected = true;
	
	Resynchronize();
	return isProtected;
}

//import void AddSkillProtection(Critter@ protector, Critter& critter, uint protectionFlags) from "custom_data";
void AddSkillProtection(Critter@ protector, Critter& critter, uint protectionFlags)
{
	Synchronize();
	
	//Log("Adding skill protection on: " + critter.Id);
	SkillProtectionInfo@ info = SkillProtectionInfo(critter);
	info.AddProtection(protector, protectionFlags);
	
	Resynchronize();
}

//import void RemoveSkillProtection(Critter@ protector, Critter& critter, uint protectionFlags) from "custom_data";
void RemoveSkillProtection(Critter@ protector, Critter& critter, uint protectionFlags)
{
	Synchronize();
	
	//Log("Removing skill protection on: " + critter.Id);
	SkillProtectionInfo@ info = SkillProtectionInfo(critter);
	info.RemoveProtection(protector, protectionFlags);
	
	Resynchronize();
}

//import void ClearSkillProtection(Critter& critter) from "custom_data";
void ClearSkillProtection(Critter& critter)
{
	Synchronize();
	
	//Log("Clearing skill protection on: "+critter.Id);
	SkillProtectionInfo@ info = SkillProtectionInfo(critter);
	info.ClearProtection();
	
	Resynchronize();
}

//import uint GetSkillProtectionCount(Critter& critter) from "custom_data";
uint GetSkillProtectionCount(Critter& critter)
{
	Synchronize();

	SkillProtectionInfo@ info = SkillProtectionInfo(critter);
	uint protectionCount = info.GetProtectionCount();
	
	Resynchronize();
	return protectionCount;
}

class SkillProtectionInfo : AbstractProtectionInfo
{
	SkillProtectionInfo(Critter@ critter)
	{
		super("SkillProtection", @critter);
	}
}

class AbstractProtectionInfo 
{
	#define _GetKey	(ProtectionId + "_" + Protected.Id)
	
	private string@ ProtectionId;
	Critter@ Protected;
	private uint[] Protectors;
	private uint[] Protections;
	
	AbstractProtectionInfo(string@ protectionId, Critter@ critter)
	{
		@ProtectionId = protectionId;
		@Protected = critter;
		Load();
	}
	
	private void Load()
	{
		Serializator serializator;
		if(!serializator.Load(_GetKey))
			return;
		
		uint size = 0;
		serializator.Get(size);
		for (uint i = 0; i < size; i++) 
		{
			uint protectorId = 0;
			uint protectionFlags = 0;
			serializator.Get(protectorId);
			serializator.Get(protectionFlags);
			Protectors.insertLast(protectorId);
			Protections.insertLast(protectionFlags);
		}
	}
	
	private void Save()
	{
		Serializator serializator;
		serializator.Set(Protections.length());
		for (uint i = 0; i < Protections.length(); i++)
		{
			serializator.Set(Protectors[i]);
			serializator.Set(Protections[i]);
		}
		serializator.Save(_GetKey);
	}
	
	bool IsProtected(uint protectionFlag)
	{
		for (uint i = 0; i < Protections.length(); i++)
			if(FLAG(Protections[i], protectionFlag))
				return true;
				
		return false;
	}
	
	void AddProtection(Critter@ protector, uint protectionFlags)
	{
		RemoveProtection(protector, protectionFlags);
		Protectors.insertLast(protector is null ? 0 : protector.Id);
		Protections.insertLast(protectionFlags);
		Save();
	}
	
	void RemoveProtection(Critter@ protector, uint protectionFlags)
	{
		uint protectorId = protector is null ? 0 : protector.Id;
		for (uint i = 0; i < Protections.length(); i++)
			if(Protections[i] == protectionFlags && Protectors[i] == protectorId)
			{
				Protectors.removeAt(i);
				Protections.removeAt(i);
				Save();
				break;
			}
	}
	
	uint GetProtectionCount()
	{
		return Protections.length();
	} 
	
	void ClearProtection()
	{
		EraseAnyData(_GetKey);
	}
}
