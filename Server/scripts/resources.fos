// Author: Skycast

#include "_macros.fos"
#include "_msgstr.fos"
#include "entire.fos"
#include "utils_for_array.fos"
#define RES_COUNT # (cr) (cr.Skill[SK_SCAVENGING]/3>=Random(1,100) ? 2 : 1)

import void RiseScavenging(Critter& cr, int chance) from "stdlib";
import void AddExp(Critter& cr, uint exp , uint type) from "experience";

uint16[] ScavengeSources = { 2220, 2221, 2222, 2223, 2275, 2276, 2252, 2253, 2254, 2255, 2256, 2257, 2265, 2267, 2268, 2269, 2270, 2315, 4601, 4602, 9242, 9243, 9244, 9245, 2005, 2006, 2106,  2396, 2397, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723 };
uint16[] SpecialJunk = {PID_SPECTACLES, PID_OXYGEN_TANK, PID_MIRROR_SHADES, PID_DOG_TAGS, PID_TAPE_RECORDER, 
							PID_RANGER_MAP, PID_RAIDERS_MAP, PID_SHERIFF_BADGE, PID_SECURITY_CARD, PID_BIG_BOOK_OF_SCIENCE,
							PID_DEANS_ELECTRONICS, PID_FIRST_AID_BOOK, PID_SCOUT_HANDBOOK, PID_GUNS_AND_BULLETS,
							PID_CATS_PAW, PID_TECHNICAL_MANUAL, PID_CHEMISTRY_MANUAL, PID_CATS_PAW_ISSUE_5, PID_HUBOLOGIST_BOOK};
uint16[] Trees =  { PID_TREE1, PID_TREE2, PID_TREE3, PID_TREE4, PID_TREE5, PID_TREE6, PID_TREE7, PID_TREE8, 
					PID_TREE9, PID_TREE10, PID_TREE11, PID_TREE12, PID_TREE13, PID_TREE14, PID_TREE15, PID_TREE16, PID_TREE17};

void _ToolInit( Item& item, bool firstTime )
{
 	item.SetEvent( ITEM_EVENT_USE, "_ToolUse" );
}

bool _ToolUse( Item& item, Critter& cr, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
	uint16 onObj;
	uint16 itemId=item.GetProtoId();
	if( valid( onItem ) )
    {
		onObj = onItem.GetProtoId();
		if ( onObj>=613 && onObj<=616 && (itemId==PID_PICKAXE || itemId==PID_PRIMITIVE))
		{
			if (onItem.Val9<=0)
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 70333 );
				return true;
			}
			if ( ( cr.Stat[ ST_CARRY_WEIGHT ] - cr.ItemsWeight() ) < 0 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WEIGHT_TOO_HEAVY );
				return true;
			}
			if (onObj==613 || onObj==614)
			{
				cr.AddItem( PID_MINERAL, RES_COUNT(cr) );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 70334);
			}
			if (onObj==615 || onObj==616)
			{
				cr.AddItem( PID_METAL_ORE, RES_COUNT(cr) );
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 70335);
			}
			onItem.Val9-=1;
			RiseScavenging(cr,10);
			AddExp(cr, EXP_MINING , ACT_MINING);
			Check_Primitive_Tool(item);
			return true;
		}
		if ( (Present(onObj,Trees))   && (itemId==PID_AXE || itemId==PID_PRIMITIVE) )
		{
			if( ( cr.Stat[ ST_CARRY_WEIGHT ] - cr.ItemsWeight() ) < 0 )
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WEIGHT_TOO_HEAVY );
				return true;
			}
			uint hexX=onItem.HexX;
			uint hexY=onItem.HexY;
			Map@ map = GetMap( onItem.MapId );
			if (!valid(map))
				return false;
			DeleteItem(onItem);
			map.AddItem( hexX,   hexY,   (onObj+1), 1 );
			cr.AddItem( PID_FIREWOOD , RES_COUNT(cr) );
			RiseScavenging(cr,10);
			AddExp(cr, EXP_WOOD , ACT_WOOD);
			cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 70336);
			Check_Primitive_Tool(item);
			return true;
		}
	}
	return false;
}

void Check_Primitive_Tool(Item& item)
{
	if (item.GetProtoId()==PID_PRIMITIVE && Random( 1, 3 ) == 3)
		_SubItem(item,1);
}
