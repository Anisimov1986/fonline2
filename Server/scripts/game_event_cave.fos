#include "entire_h.fos"

#include "_maps.fos"
#include "_itempid.fos"
#include "_npc_pids.fos"
#include "_teams.fos"
#include "_bags.fos"
#include "game_event_class_utils.fos"
#include "game_event_common_critters.fos" 
#include "game_event_common_loot.fos"
#include "game_event_gossip_h.fos"
#include "_msgstr.fos" 

#define EVENT_DURATION                  (REAL_MINUTE(10))
#define GOSSIP_DELAY                    (REAL_MINUTE(3))
#define GOSSIP_DURATION                 (REAL_MINUTE(6))
#define SIGHT_RANGE                     (25)
#define BANDITS_CAVE_EVENT_ID           (38)
#define ROBBERS_CAVE_EVENT_ID           (39)
#define HIGHWAYMEN_CAVE_EVENT_ID        (40)
#define GANG_CAVE_EVENT_ID              (41)
#define RAIDER_CAVE_EVENT_ID            (42)


#define ROLE_HUNTER                     (288100)

import void SpawnEventFlares(Map& map, uint entire) from "game_event_utils";
import void SpawnMinesLowQuantity(Map& map, uint entire, uint entireFillRatio, bool noLoot) from "game_event_utils";
import void RemoveEventFlares(Map& map) from "game_event_utils";
import int GetNextTime(uint Id) from "game_events";
import Location@+ GetNearestVisibleLocation(uint x, uint y) from "game_event_utils";
import double CountAliveCrittersPercent(Map &map) from "game_event_utils";

// Hunters initialization
int[] hunterParams = {ST_REPLICATION_TIME, -1, ST_BAG_ID, BAG_HUNT}; 		
int[] hunterPids = {NPC_PID_HUNT1, NPC_PID_HUNT2, NPC_PID_HUNT3};
CritterTemplate hunterCritterTemplate = CritterTemplate(hunterPids, ROLE_HUNTER)
		.SetStartEntire(ENTIRE_EVENT_DEFENDER_SPAWN)
		.SetCritterParams(hunterParams);		

		
dictionary @events;
void initEvents()
{
	@events = dictionary();
	
	events.set("" + BANDITS_CAVE_EVENT_ID, CaveEvent(BANDITS_CAVE_EVENT_ID)
		.AddGroupId(GROUP_BanditsVS)
		.AddGroupId(GROUP_Bandits)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent1)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent2)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent3)
		.SetEnemy(ROLE_BANDIT, 4)
		.AddToolsLoot(PID_MULTI_TOOL, 1, 1)
		.AddToolsLoot(PID_ROPE, 1, 3)
		.AddToolsLoot(PID_METAL_TRASH, 4, 6)
		.AddToolsLoot(PID_CORD, 1, 3)
		.AddToolsLoot(PID_GUNPOWDER, 4, 6)
		.AddToolsLoot(rarePreWarLoot)
		.AddToolsLoot(PID_SUPER_TOOL_KIT, 1, 1, 0.015)
		.AddDrugsLoot(PID_MENTATS, 0, 2)
		.AddDrugsLoot(PID_NUKA_COLA, 1, 3)
		.AddDrugsLoot(PID_STIMPAK, 1, 5)
		.AddDrugsLoot(PID_CIGARETTES, 1, 3)
		.AddAmmoLoot(PID_MOLOTOV_COCKTAIL, 4, 6)
		.AddAmmoLoot(PID_10MM_JHP, 50, 150)
		.AddAmmoLoot(PID_SHOTGUN_SHELLS, 50, 150)
		.AddAmmoLoot(PID_44_MAGNUM_JHP, 50, 150)
		.AddAmmoLoot(PID_5MM_JHP, 50, 150)
		.AddAmmoLoot(PID_9MM_AMMO, 50, 150)
		.AddAmmoLoot(commonL1Loot)
		.AddBooksLoot(PID_BOTTLE_CAPS, 250, 750)
		.AddBooksLoot(PID_LOCKPICKS, 0, 1)
		.AddBooksLoot(PID_ELECTRONIC_LOCKPICKS, 1, 1, 0.015)
		.AddBooksLoot(rareBookLoot)
	);

	events.set("" + ROBBERS_CAVE_EVENT_ID, CaveEvent(ROBBERS_CAVE_EVENT_ID)
		.AddGroupId(GROUP_Robbers)
		.AddGroupId(GROUP_RobbersVS)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent1)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent2)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent3)
		.SetEnemy(ROLE_ROBBER, 5)
		.AddToolsLoot(PID_MULTI_TOOL, 1, 1)
		.AddToolsLoot(PID_ROPE, 2, 4)
		.AddToolsLoot(PID_METAL_TRASH, 5, 7)
		.AddToolsLoot(PID_CORD, 2, 4)
		.AddToolsLoot(PID_GUNPOWDER, 5, 7)
		.AddToolsLoot(rarePreWarLoot)
		.AddToolsLoot(PID_SUPER_TOOL_KIT, 1, 1, 0.015)
		.AddDrugsLoot(PID_MENTATS, 1, 3)
		.AddDrugsLoot(PID_NUKA_COLA, 2, 4)
		.AddDrugsLoot(PID_STIMPAK, 2, 6)
		.AddDrugsLoot(PID_CIGARETTES, 2, 4)
		.AddAmmoLoot(PID_MOLOTOV_COCKTAIL, 4, 6)
		.AddAmmoLoot(PID_10MM_JHP, 50, 150)
		.AddAmmoLoot(PID_10MM_AP, 50, 150)
		.AddAmmoLoot(PID_SHOTGUN_SHELLS, 50, 150)
		.AddAmmoLoot(PID_44_MAGNUM_JHP, 50, 150)
		.AddAmmoLoot(PID_44_FMJ_MAGNUM, 50, 150)
		.AddAmmoLoot(PID_5MM_JHP, 50, 150)
		.AddAmmoLoot(PID_5MM_AP, 50, 150)
		.AddAmmoLoot(commonL1Loot)	
		.AddBooksLoot(PID_BOTTLE_CAPS, 500, 1000)
		.AddBooksLoot(PID_LOCKPICKS, 0, 1)
		.AddBooksLoot(PID_ELECTRONIC_LOCKPICKS, 1, 1, 0.015)
		.AddBooksLoot(rareBookLoot)	
	);
	
	events.set("" + HIGHWAYMEN_CAVE_EVENT_ID, CaveEvent(HIGHWAYMEN_CAVE_EVENT_ID)
		.AddGroupId(GROUP_Highwaymen)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent1)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent2)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent3)
		.SetEnemy(ROLE_HIGHWAYMEN, 7)
		.AddToolsLoot(PID_MULTI_TOOL, 1, 1)
		.AddToolsLoot(PID_ROPE, 3, 5)
		.AddToolsLoot(PID_METAL_TRASH, 6, 8)
		.AddToolsLoot(PID_CORD, 3, 5)
		.AddToolsLoot(PID_GUNPOWDER, 6, 8)
		.AddToolsLoot(rarePreWarLoot)
		.AddToolsLoot(PID_SUPER_TOOL_KIT, 1, 1, 0.015)
		.AddDrugsLoot(PID_MENTATS, 1, 3)
		.AddDrugsLoot(PID_NUKA_COLA, 3, 5)
		.AddDrugsLoot(PID_STIMPAK, 2, 6)
		.AddDrugsLoot(PID_SUPER_STIMPAK, 2, 4)
		.AddDrugsLoot(PID_MENTATS, 0, 2)
		.AddDrugsLoot(PID_BUFFOUT, 0, 2)
		.AddDrugsLoot(PID_PSYCHO, 0, 1)
		.AddDrugsLoot(PID_JET, 0, 2)
		.AddDrugsLoot(PID_RAD_X, 0, 2)
		.AddDrugsLoot(PID_RADAWAY, 0, 2)
		.AddDrugsLoot(PID_CIGARETTES, 3, 5)
		.AddAmmoLoot(PID_FRAG_GRENADE, 4, 6)
		.AddAmmoLoot(PID_10MM_AP, 100, 200)
		.AddAmmoLoot(PID_5MM_AP, 100, 200)
		.AddAmmoLoot(PID_10MM_JHP, 100, 200)
		.AddAmmoLoot(PID_SHOTGUN_SHELLS, 100, 200)
		.AddAmmoLoot(PID_44_MAGNUM_JHP, 100, 200)
		.AddAmmoLoot(PID_44_FMJ_MAGNUM, 100, 200)
		.AddAmmoLoot(PID_5MM_JHP, 100, 200)
		.AddAmmoLoot(commonL3Loot)
		.AddBooksLoot(PID_BOTTLE_CAPS, 750, 1250)
		.AddBooksLoot(PID_LOCKPICKS, 0, 1)
		.AddBooksLoot(PID_ELECTRONIC_LOCKPICKS, 1, 1, 0.015)
		.AddBooksLoot(rareBookLoot)
	);
	
	events.set("" + GANG_CAVE_EVENT_ID, CaveEvent(GANG_CAVE_EVENT_ID)
		.AddGroupId(GROUP_Gang)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent1)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent2)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent3)
		.SetEnemy(ROLE_GANG, 8)
		.AddToolsLoot(PID_MULTI_TOOL, 1, 1)
		.AddToolsLoot(PID_KEVLAR_POLYMER, 0, 1)
		.AddToolsLoot(PID_HIGH_GRADE_STEEL, 0, 1)
		.AddToolsLoot(PID_ROPE, 4, 6)
		.AddToolsLoot(PID_METAL_TRASH, 7, 9)
		.AddToolsLoot(PID_CORD, 4, 6)
		.AddToolsLoot(PID_GUNPOWDER, 7, 9)
		.AddToolsLoot(rarePreWarLoot)
		.AddToolsLoot(PID_SUPER_TOOL_KIT, 1, 1, 0.015)
		.AddDrugsLoot(PID_MENTATS, 1, 3)
		.AddDrugsLoot(PID_NUKA_COLA, 3, 5)
		.AddDrugsLoot(PID_STIMPAK, 3, 7)
		.AddDrugsLoot(PID_SUPER_STIMPAK, 3, 5)
		.AddDrugsLoot(PID_MENTATS, 1, 3)
		.AddDrugsLoot(PID_BUFFOUT, 1, 3)
		.AddDrugsLoot(PID_PSYCHO, 1, 1)
		.AddDrugsLoot(PID_JET, 1, 3)
		.AddDrugsLoot(PID_RAD_X, 1, 3)
		.AddDrugsLoot(PID_RADAWAY, 1, 3)
		.AddDrugsLoot(PID_CIGARETTES, 3, 5)
		.AddAmmoLoot(PID_FRAG_GRENADE, 2, 3)
		.AddAmmoLoot(PID_PLASMA_GRENADE, 2, 3)
		.AddAmmoLoot(PID_10MM_AP, 200, 400)
		.AddAmmoLoot(PID_5MM_AP, 200, 400)
		.AddAmmoLoot(PID_SHOTGUN_SHELLS, 100, 200)
		.AddAmmoLoot(PID_44_FMJ_MAGNUM, 200, 240)
		.AddAmmoLoot(commonL2Loot)	
		.AddBooksLoot(PID_BOTTLE_CAPS, 1000, 1500)
		.AddBooksLoot(PID_LOCKPICKS, 0, 1)
		.AddBooksLoot(PID_ELECTRONIC_LOCKPICKS, 1, 1, 0.015)
		.AddBooksLoot(rareBookLoot)	
	);
	
	events.set("" + RAIDER_CAVE_EVENT_ID, CaveEvent(RAIDER_CAVE_EVENT_ID)
		.AddGroupId(GROUP_Raiders_Metal_Armor)
		.AddGroupId(GROUP_Raiders_Weak)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent1)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent2)
		.AddLocationPid(TERRAIN_Mountain, LOCATION_CaveEvent3)
		.SetEnemy(ROLE_RAIDER, 9)
		.AddToolsLoot(PID_MULTI_TOOL, 1, 1)
		.AddToolsLoot(PID_KEVLAR_POLYMER, 1, 2)
		.AddToolsLoot(PID_HIGH_GRADE_STEEL, 1, 2)
		.AddToolsLoot(PID_ROPE, 4, 6)
		.AddToolsLoot(PID_METAL_TRASH, 8, 10)
		.AddToolsLoot(PID_CORD, 4, 6)
		.AddToolsLoot(PID_GUNPOWDER, 8, 10)
		.AddToolsLoot(rarePreWarLoot)
		.AddToolsLoot(PID_SUPER_TOOL_KIT, 1, 1, 0.015)
		.AddDrugsLoot(PID_MENTATS, 1, 3)
		.AddDrugsLoot(PID_NUKA_COLA, 3, 5)
		.AddDrugsLoot(PID_STIMPAK, 3, 7)
		.AddDrugsLoot(PID_SUPER_STIMPAK, 4, 7)
		.AddDrugsLoot(PID_MENTATS, 1, 4)
		.AddDrugsLoot(PID_BUFFOUT, 1, 4)
		.AddDrugsLoot(PID_PSYCHO, 1, 2)
		.AddDrugsLoot(PID_JET, 1, 4)
		.AddDrugsLoot(PID_RAD_X, 1, 4)
		.AddDrugsLoot(PID_RADAWAY, 1, 4)
		.AddDrugsLoot(PID_CIGARETTES, 3, 5)
		.AddAmmoLoot(PID_FRAG_GRENADE, 3, 6)
		.AddAmmoLoot(PID_PLASMA_GRENADE, 3, 6)
		.AddAmmoLoot(PID_10MM_AP, 200, 500)
		.AddAmmoLoot(PID_5MM_AP, 200, 500)
		.AddAmmoLoot(PID_SHOTGUN_SHELLS, 100, 200)
		.AddAmmoLoot(PID_44_FMJ_MAGNUM, 200, 300)
		.AddAmmoLoot(commonL3Loot)		
		.AddBooksLoot(PID_BOTTLE_CAPS, 1250, 1750)
		.AddBooksLoot(PID_LOCKPICKS, 0, 1)
		.AddBooksLoot(PID_ELECTRONIC_LOCKPICKS, 1, 1, 0.015)
		.AddBooksLoot(rareBookLoot)
	);
}


uint e_event_start(array<uint>@ values)
{
	if (values[0] == 0)
	{
		return 0;
	}
	
	event_start(values[0]);	
	return GetNextTime(values[0]);
}

void event_start(int id) 
{
	CaveEvent @event;
		
	if (!valid(events))
	{
		initEvents();
	}
	
	if (events.get("" + id, @event))
	{
		event.StartEvent();
		
		uint[] values = {id};
		CreateTimeEvent(__FullSecond + EVENT_DURATION, "e_event_stop", values, true);
	}
}

uint e_event_stop(array<uint>@ values)
{
	CaveEvent @event;
		
	if (!valid(events))
	{
		initEvents();
	}
	
	if (events.get("" + values[0], @event))
	{
		event.StopEvent();
	}
	
	return 0;
}

void event_start( Critter& cr, int id, int , int)
{
	event_start(id);
}

void event_stop( Critter& cr, int id, int , int)
{
	uint[] values = {id};
	e_event_stop(values);
}

void event_start(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	event_start(values[0]);
}

void event_stop(Critter& critter, int actionType, int, int, string@, int[]@ values)
{
	array<uint> v(values.length);
	
	for (uint i = 0; i < values.length(); i++)
	{
		v[i] = values[i];
	}
	
	e_event_stop(v);
}


class CaveEvent
{	
	private int eventId, enemyRole, enemyCount, huntersCount = 2;
	private WorldMapLocationGenerator worldMapLocationGenerator;
	private AutoLootGenerator autoDrugsLootGenerator, autoAmmoLootGenerator, autoBooksLootGenerator, autoToolsLootGenerator;
	
	CaveEvent(int eventId)
	{
		this.eventId = eventId;
	}
	
	CaveEvent@ AddGroupId(uint groupId)
	{
		worldMapLocationGenerator.AddGroupId(groupId);
		return @this;
	}
	
	CaveEvent@ AddLocationPid(uint terrainType, uint locationPid)
	{
		worldMapLocationGenerator.AddLocationPid(terrainType, locationPid);
		return @this;
	}
	
	CaveEvent@ SetEnemy(int enemyRole, int enemyCount)
	{
		CritterTemplate@ critterTemplate = GetCritterTemplate(enemyRole);
		critterTemplate.SetShowCritterDist1(SIGHT_RANGE);
	
		this.enemyRole = enemyRole;
		this.enemyCount = enemyCount;
		return @this;
	}
	
	CaveEvent@ AddDrugsLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity)
	{
		autoDrugsLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity);
		return @this;
	}
	
	CaveEvent@ AddDrugsLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity, double probability)
	{
		autoDrugsLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity, probability);
		return @this;
	}
		
	CaveEvent@ AddDrugsLoot(AutoLootGenerator& autoLootGenerator)
	{
		this.autoDrugsLootGenerator.AddLoot(autoLootGenerator);
		return @this;
	}

	CaveEvent@ AddAmmoLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity)
	{
		autoAmmoLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity);
		return @this;
	}
	
	CaveEvent@ AddAmmoLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity, double probability)
	{
		autoAmmoLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity, probability);
		return @this;
	}
		
	CaveEvent@ AddAmmoLoot(AutoLootGenerator& autoLootGenerator)
	{
		this.autoAmmoLootGenerator.AddLoot(autoLootGenerator);
		return @this;
	}
	
	CaveEvent@ AddBooksLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity)
	{
		autoBooksLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity);
		return @this;
	}
	
	CaveEvent@ AddBooksLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity, double probability)
	{
		autoBooksLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity, probability);
		return @this;
	}
		
	CaveEvent@ AddBooksLoot(AutoLootGenerator& autoLootGenerator)
	{
		this.autoBooksLootGenerator.AddLoot(autoLootGenerator);
		return @this;
	}
	
	CaveEvent@ AddToolsLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity)
	{
		autoToolsLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity);
		return @this;
	}
	
	CaveEvent@ AddToolsLoot(int lootPid, int lootMinQuantity, int lootMaxQuantity, double probability)
	{
		autoToolsLootGenerator.AddLoot(lootPid, lootMinQuantity, lootMaxQuantity, probability);
		return @this;
	}
		
	CaveEvent@ AddToolsLoot(AutoLootGenerator& autoLootGenerator)
	{
		this.autoToolsLootGenerator.AddLoot(autoLootGenerator);
		return @this;
	}
	
	bool IsEventMap(Map& map)
	{
		AutoLocation autoLocation = AutoLocation(eventId);
		return autoLocation.IsLocationMap(map);
	}
	
	void StartEvent()
	{	
		AutoLocation autoLocation = AutoLocation(eventId);
		Location @location = autoLocation.Create(worldMapLocationGenerator);
		
		if (!valid(location))
		{
			return;
		}
		
		location.Visible = true;
		location.AutoGarbage = false;
		location.Color = COLOR_RED;
	
		Map @mapOut = location.GetMapByIndex(0); 
		if (!valid(mapOut)) 
		{
			autoLocation.Delete();
			return;
		}
		
		Map @mapIn = location.GetMapByIndex(1); 
		if (!valid(mapIn)) 
		{
			autoLocation.Delete();
			return;
		}

		AddHunters(mapOut);
		SpawnMinesLowQuantity(mapOut, ENTIRE_EVENT_MINE_SPAWN, 85, true);
		SpawnEventFlares(mapOut, ENTIRE_EVENT_FLARE_SPAWN);
		
		AddEnemies(mapIn);
		AddCaveLoot(mapIn);
		mapIn.SetScript("_MapInit");
		
		InitializeGossip(location);
	}
	
	void InitializeGossip(Location &location)
	{		
		Location @townLocation = GetNearestVisibleLocation(location.WorldX, location.WorldY);
		if (!valid(townLocation)) 
		{
			return;
		}
		
		CritterTemplate@ critterTemplate = GetCritterTemplate(enemyRole);
		int critterPid = critterTemplate.GetCritterPids()[0];
		
		GossipDefinition@ gossipDefinition = CreateGossipDefinition(GOSSIP_MEDIUM, GOSSIP_DURATION);
		gossipDefinition.SetGossipId(eventId);
		gossipDefinition.SetScopeId(GOSSIP_SCOPE_EVENT);
		gossipDefinition.SetDelay(GOSSIP_DELAY);
		gossipDefinition.SetSourceLocationId(location.Id);
		gossipDefinition.SetMsgId(STR_CAVE_EVENT_GOSSIP_LOC);
		gossipDefinition.SetSourceMsgId(STR_CAVE_EVENT_GOSSIP_NO_LOC);
		gossipDefinition.SetLexems("$locationname" + "@msg GM " + STR_LOC_NAME(townLocation.GetProtoId()) + "@"
				+ "$crittername" + "@msg DLG " + STR_NPC_PROTO_NAME(critterPid) + "@");
		StartGossip(gossipDefinition);
	}
	
	void StopEvent()
	{
		AutoLocation autoLocation = AutoLocation(eventId);
		
		if (!autoLocation.IsCreated())
		{
			return;
		}
		
		autoLocation.Delete();
		
		Location @location = autoLocation.GetLocation();
		
		location.Visible = false;
		location.AutoGarbage = true;
		location.Update();
	
		Map @map = location.GetMapByIndex(0); 
		if (!valid(map)) 
		{
			return;
		}
	
		RemoveEventFlares(map);
		
		StopGossip(eventId, GOSSIP_SCOPE_EVENT);
	}
	
	private void AddCaveLoot(Map& map)
	{
		autoToolsLootGenerator.SpawnLootToContainers(map, 10, false, true);
		autoDrugsLootGenerator.SpawnLootToContainers(map, 11, true, true);
		autoAmmoLootGenerator.SpawnLootToContainers(map, 12, true, true);
		autoBooksLootGenerator.SpawnLootToContainers(map, 13, false, false);
	}
	
	private void AddHunters(Map& map)
	{	
		for (int i = 0; i < huntersCount; i++)
		{
			Critter@ critter = hunterCritterTemplate.Spawn(map);
		}
		
		hunterCritterTemplate.ToDeadAll(map, ANIM2_DEAD_EXPLODE);
	}
	
	private void AddEnemies(Map& map)
	{		
		CritterTemplate@ critterTemplate = GetCritterTemplate(enemyRole);
		
		for (int i = 0; i < enemyCount; i++)
		{
			critterTemplate.Spawn(map);
		}
	}
	
	void TryStopEvent()
	{
		AutoLocation autoLocation = AutoLocation(eventId);
		if (!autoLocation.IsCreated())
		{
			return;
		}
	
		Location @location = autoLocation.GetLocation();
		Map @mapIn = location.GetMapByIndex(1);

		if (!valid(mapIn)) 
		{
			return;
		}
		
		if (CountAliveCrittersPercent(mapIn) < 0.25)
		{
			StopEvent();
		}
	}
}

CaveEvent@ findEvent(Map& map)
{
	if (!valid(events))
	{
		initEvents();
	}
	
	string@[] keys;
	events.keys(keys);

	for (uint i = 0; i < keys.length(); i++)
	{
		CaveEvent @event;
		
		if (events.get(keys[i], @event) && event.IsEventMap(map))
		{
			return event;
		}
	}
	
	return null;
}

void _MapInit(Map& map, bool firstTime)
{
	map.SetEvent(MAP_EVENT_OUT_CRITTER, "_MapCritterOut");
}

void _MapCritterOut(Map& map, Critter& cr)
{
	CaveEvent @event = findEvent(map);
	if (valid(event))
	{
		event.TryStopEvent();
	}
}