// Author: rifleman17
// Скрипт генератора мобов в пещерах, аналог оригинальному из Ф2

#include "_ai.fos"
#include "_bags.fos"
#include "_macros.fos"
#include "_npc_pids.fos"
#include "_teams.fos"
#include "entire.fos"
#include "economy_h.fos"
#include "rare_loot_queue_h.fos"

#define ENTIRE_SPAWN       ( 99 )
#define ENTIRE_CHEST       ( 98 )

#define SCRIPT_GECKO       ( "cave_mobs@_CaveNpcInit" )
#define SCRIPT_SCORP       ( "cave_mobs@_CaveNpcInit" )
#define SCRIPT_DCLAW       ( "cave_mobs@_CaveNpcInit" )
#define SCRIPT_ECRAT       ( "cave_mobs@_CaveNpcInit" )
#define SCRIPT_ROBBER      ( "cave_mobs@_CaveNpcInit" )
#define MESSAGE_ATTACK     ( 32 )                   // Сообщение от игрока "атакуйте меня". Отсылается всем видимым мобам, см. encounter_npc.fos
#define PID_CHEST          ( PID_HUMAN_BONES )
#define ENTIRE_DIST        ( Random( 3, 6 ) )       // Дистанция от контрольного гекса до точки установки Криттера
#define AI_ROBBERS         ( AIPACKET_MERC_RAIDER ) // Общий аи пакет для рейдеров в пещерах
#define SEE_PLAYER_FROM    ( 12020 )                // начало строк "увидел игрока
#define SEE_PLAYER_TO      ( 12038 )                // конец строк "увидел игрока"

import void _MobInit( Critter& npc, bool firstTime ) from "encounter_npc";
import bool AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run ) from "npc_planes";
import bool IsItemAviable(uint16 pid) from "blueprints";
import int ProcessRareLootRules(uint16 protoId, uint mapId, int count) from "rare_loot_queue";

class CCaveMobInfo
{
    uint16 Pid;
    string Script;
    uint16 Bag;
    uint16 AI;
    uint16 Team;

    void Set( uint16 pid, string script, uint16 bag, uint16 ai, uint16 team )
    {
        this.Pid = pid;
        this.Script = script;
        this.Bag = bag;
        this.AI = ai;
        this.Team = team;
    }

    Critter@ TryPlaceMob( Entire @ entire, Map @ map, uint8 dir )
    {
        if( !valid( entire ) || !valid( map ) )
            return null;
        uint16 crX = entire.HexX;
        uint16 crY = entire.HexY;
        map.MoveHexByDir( crX, crY, dir, ENTIRE_DIST );

        if( map.GetPathLength( crX, crY, entire.HexX, entire.HexY, 0 ) > 0 && map.IsHexPassed( crX, crY ) )
        {
            int[] params = { ST_AI_ID, this.AI, ST_TEAM_ID, this.Team, ST_BAG_ID, this.Bag };
            Critter @ mob = map.AddNpc( this.Pid, crX, crY, GetDirection( crX, crY, entire.HexX, entire.HexY ), params, null, this.Script );
            if( valid( mob ) )
                return mob;
        }
        return null;
    }
}
class CCaveItemInfo
{
    uint16 Pid;
    uint8  Min;
    uint8  Max;

    void Set( uint16 pid, uint8 min, uint8 max )
    {
        this.Pid = pid;
        this.Min = min;
        this.Max = max;
    }

    void AddToChect( Item @ chest )
    {
        if( !valid( chest ) || !IsItemAviable(this.Pid))
            return;

        uint num = Random( this.Min, this.Max );
		num = ProcessRareLootRules(this.Pid, chest.MapId, num);
	
        if( num == 0 )
            return;
		
        chest.AddItem( this.Pid, num, 0 );
    }
}

class CCaveContainerInfo
{
    uint16 Pid;
    uint8  Entire;
    uint8  TrapValue;
    uint8  LockerComplexity;

    CCaveItemInfo[] Items;

    void Set( uint16 pid, uint16 entire, uint8 trapValue, uint8 lockerCompl )
    {
        this.Pid = pid;
        this.Entire = entire;
        this.TrapValue = trapValue;
        this.LockerComplexity = lockerCompl;
    }

    void PlaceCont( Map @ map )
    {
        if( !valid( map ) )
            return;
        Entire[] entires;
        uint len = ParseEntires( map, entires, ENTIRE_CHEST );
        if( len > 0 )
        {
            bool filled = false;
            uint tries = 0;
            int  maxChests = 1;
            while( maxChests > 0 && tries < 10 )
            {
                Entire @ ent = entires[ Random( 0, len - 1 ) ];
                if( map.GetItems( ent.HexX, ent.HexY, null ) == 0 )
                {
                    maxChests--;
                    Item @ chest = map.AddItem( ent.HexX, ent.HexY, PID_CHEST, 1 );
                    if( valid( chest ) && !filled )
                    {
                        filled = true;
                        for( uint i = 0, l = this.Items.length(); i < l; i++ )
                        {
                            this.Items[ i ].AddToChect( chest );
                        }
                    }
                }
                tries++;
            }
        }
    }
}

class CCaveEncounterInfo
{
    CCaveEncounterInfo()
    {
        this.IsSpecial = false;
    }
    bool               IsSpecial;
    uint8              MobsNum;
    CCaveMobInfo[] Mobs;
    CCaveContainerInfo Container;
    Map@               CaveMap;

    void AddCaveMobInfo( uint16 pid, string script, uint16 bag, uint16 ai, uint16 team )
    {
        Mobs.grow( 1 );
        Mobs.last().Set( pid, script, bag, ai, team );
    }

    void AddCaveChestInfo( uint16 pid, uint16 entire, uint16 trapValue, uint16 lockerCompl )
    {
        this.Container = CCaveContainerInfo();
        this.Container.Set( pid, entire, trapValue, lockerCompl );
    }

    void AddCaveItemInfo( uint16 pid, uint16 min, uint16 max )
    {
        if( !valid( this.Container ) )
            return;
        this.Container.Items.grow( 1 );
        this.Container.Items.last().Set( pid, min, max );
    }

    void FillMap( Map@ map, Critter @[] @ group )
    {
        if( !valid( map ) )
            return;
        if( this.IsSpecial && valid( this.Container ) )
            this.Container.PlaceCont( map );
        Entire[] entires;
        uint len = ParseEntires( map, entires, ENTIRE_SPAWN );
        if( len > 0 )
        {
            int tries = 0;
            for( uint i = 0; i < len; i++ )
            {
                for( uint k = 0; k < this.MobsNum; k++ )
                {
                    tries = 10;
                    Critter @ mob;
                    while( !valid( mob ) && tries > 0 )
                    {
                        CCaveMobInfo @ mInfo = this.Mobs[ Random( 0, this.Mobs.length() - 1 ) ];
                        if( valid( mInfo ) )
                        {
                            @mob = mInfo.TryPlaceMob( entires[ i ], map, Random( 0, 5 ) );
                        }
                        tries--;
                    }
                    if( valid( mob ) )
                    {
                        for( uint j = 0, l = group.length(); j < l; j++ )
                        {
                            Critter @ target = group[ j ];
                            if( valid( target ) && !target.IsDead() && target.IsPlayer() )
                            {
                                mob.AddEnemyInStack( target.Id );
                            }
                        }
                    }
                }
            }
        }
    }
}

CCaveEncounterInfo@ SetupEncounterCave( Map @ map, Critter@[] group )
{
    if( !valid( group ) )
        return null;
    uint8 maxLevel = 0;
    uint8 minLuck = 10;
    uint8 minLevel = 30;
    for( uint i = 0, l = group.length(); i < l; i++ )
    {
        if( group[ i ].Stat[ ST_LEVEL ] > maxLevel )
            maxLevel = group[ i ].Stat[ ST_LEVEL ];
        if( group[ i ].Stat[ ST_LUCK ] < minLuck )
            minLuck = group[ i ].Stat[ ST_LUCK ];
        if( group[ i ].Stat[ ST_LEVEL ] < minLevel )
            minLevel = group[ i ].Stat[ ST_LEVEL ];
    }
    CCaveEncounterInfo @ eInfo = CCaveEncounterInfo();
    SetupMobs( eInfo, maxLevel );
    SetupChest( eInfo, minLuck, minLevel );
    return eInfo;
}


const uint16[] Pids_TreasureLow = { PID_BPACK_TENT, PID_LIGHTER, PID_10MM_SMG, PID_GREASE_GUN, PID_SCOPED_HUNTING_RIFLE, PID_44_MAGNUM_SPEEDLOADER, PID_SAWED_OFF_SHOTGUN, PID_FRAG_GRENADE, PID_COMBAT_KNIFE, PID_LEATHER_ARMOR, PID_METAL_ARMOR, PID_PURPLE_ROBE, PID_DESERT_EAGLE_EXT_MAG };
const uint16[] Pids_TreasureMid = { PID_GUNS_AND_BULLETS, PID_SCOUT_HANDBOOK, PID_FIRST_AID_BOOK, PID_DEANS_ELECTRONICS, PID_BIG_BOOK_OF_SCIENCE, PID_SHOVEL, PID_DOCTORS_BAG, PID_RIPPER, PID_PLASMA_GRENADE, PID_PLASMA_PISTOL_EXT_CART, PID_LASER_RIFLE_EXT_CAP, PID_IMPROVED_FLAMETHROWER, PID_COMBAT_SHOTGUN, PID_METAL_ARMOR_MK_II, PID_14MM_PISTOL, PID_NEEDLER_PISTOL, PID_223_PISTOL, PID_ASSAULT_RIFLE_EXT_MAG,   };
const uint16[] Pids_TreasureHigh = { PID_NECKLACE, PID_MAGIC_8_BALL, PID_GOLD_LOCKET, PID_FUZZY_PAINTING, PID_DAISIES, PID_MIRROR_SHADES, PID_SPECTACLES, PID_HEART_PILLS, PID_MARKED_DECK_OF_CARDS, PID_DECK_OF_CARDS, PID_LOADED_DICE, PID_DICE, PID_COSMETIC_CASE, PID_RED_CONDOM, PID_GREEN_CONDOM, PID_BLUE_CONDOM, PID_MOTION_SENSOR, PID_STEALTH_BOY, PID_GEIGER_COUNTER, PID_BIO_GEL, PID_ELEC_LOCKPICK_MKII, PID_ELECTRONIC_LOCKPICKS, PID_SUPER_TOOL_KIT, PID_GOLD_TOOTH, PID_YELLOW_PASS_KEY, PID_BLUE_PASS_KEY, PID_RED_PASS_KEY, PID_COOKIE, PID_HYPO, PID_JET_ANTIDOTE, PID_JET, PID_PSYCHO, PID_BUFFOUT, PID_MENTATS, PID_PLATED_BOXING_GLOVES, PID_BOXING_GLOVES, PID_SUPER_CATTLE_PROD, PID_WAKIZASHI_BLADE, PID_ELI_KNIFE, PID_LOUISVILLE_SLUGGER, PID_YK32_PULSE_PISTOL, PID_SOLAR_SCORCHER, PID_HK_P90C, PID_SNIPER_RIFLE, PID_BLACK_ROBE, PID_COMBAT_ARMOR, PID_COMBAT_ARMOR_MK_II, PID_MINIGUN, PID_MEGA_POWER_FIST, PID_PLASMA_RIFLE, PID_LIGHT_SUPPORT_WEAPON, PID_AVENGER_MINIGUN, PID_XL70E3};
const uint16[] Pids_Ammo = { PID_7_62MM_AMMO, PID_5MM_AP, PID_14MM_AP, PID_SMALL_ENERGY_CELL, PID_223_FMJ, PID_SHOTGUN_SHELLS, PID_SHOTGUN_SHELLS, PID_SHOTGUN_SHELLS, PID_SHOTGUN_SHELLS, PID_45_CALIBER_AMMO, PID_SMALL_ENERGY_CELL, PID_10MM_JHP, PID_10MM_JHP, PID_10MM_JHP };
const uint16[] Pids_Blueprints = {BLUEPRINT_LEVEL1, BLUEPRINT_LEVEL2, BLUEPRINT_LEVEL3};
const uint16[] Pids_Recipies = {PID_PLASMA_RIFLE_RECIPE, PID_PLASMA_GRENADE_RECIPE, PID_AVENGER_MINIGUN_RECIPE, PID_SNIPER_RIFLE_RECIPE, PID_XL70E3_RECIPE, 
		PID_HK_P90C_RECIPE, PID_HUBOLOGIST_ROBE_RECIPE, PID_LASER_RIFLE_EXT_CAP_RECIPE, PID_LIGHT_SUPPORT_WEAPON_RECIPE};

void SetupChest( CCaveEncounterInfo& eInfo, uint8 minLuck, uint8 minLevel )
{
    if( !eInfo.IsSpecial )
        return;
    uint8 lockCompl = 0;    // ToDO
    uint8 trapVal = 0;      // ToDO
    int   numSpecial = Random( 1, 3 );
    eInfo.AddCaveChestInfo( PID_CHEST, ENTIRE_CHEST, trapVal, lockCompl );
    if( HAS_CHANCE( 50 ) )
        eInfo.AddCaveItemInfo( PID_STIMPAK, 1, 5 );
    if( HAS_CHANCE( 25 ) )
    {
        eInfo.AddCaveItemInfo( Pids_TreasureLow[ Random( 0, Pids_TreasureLow.length() - 1 ) ], 1, 1 );
        numSpecial--;
        if( numSpecial > 0 )
        {
            numSpecial--;
            eInfo.AddCaveItemInfo( Pids_TreasureMid[ Random( 0, Pids_TreasureMid.length() - 1 ) ], 1, 1 );
        }
        if( numSpecial > 0 )
        {
            numSpecial--;
            eInfo.AddCaveItemInfo( Pids_TreasureHigh[ Random( 0, Pids_TreasureHigh.length() - 1 ) ], 1, 1 );
        }
    }
    if( HAS_CHANCE( 50 ) )
    {
        eInfo.AddCaveItemInfo( Pids_Ammo[ Random( 0, Pids_Ammo.length() - 1 ) ], 21, 93 );
    }
    if( HAS_CHANCE( 1 ) )
    {
        eInfo.AddCaveItemInfo( PID_2MM_EC_AMMO, 21, 43 );
    }
	if (HAS_CHANCE(10))
	{
		eInfo.AddCaveItemInfo( Pids_Blueprints[ Random( 0, Pids_Blueprints.length() - 1 ) ], 1, 1 );
	}
	if (HAS_CHANCE(5))
	{
		eInfo.AddCaveItemInfo( Pids_Recipies[ Random( 0, Pids_Recipies.length() - 1 ) ], 1, 1 );
	}	

    eInfo.AddCaveItemInfo( PID_BOTTLE_CAPS, RewardMod( 63 ), RewardMod( 223 ) );
}

void SetupMobs( CCaveEncounterInfo& eInfo, uint8 maxLevel )
{
    uint8 val = Random( 1, 12 );
    CCaveMobInfo @ mInfo;
    switch( val )
    {
    case 1:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = 1;
        eInfo.AddCaveMobInfo( NPC_PID_ABOMINATION, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        break;
    case 2:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = 1;
        eInfo.AddCaveMobInfo( NPC_PID_MONSTROSITY, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        break;
    case 3:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 5, 8 );
        eInfo.AddCaveMobInfo( NPC_PID_Wolve, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        break;
    case 4:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 5, 8 );
        eInfo.AddCaveMobInfo( NPC_PID_MutatedRadscorpion, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        break;
    case 5:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 5, 8 );
        eInfo.AddCaveMobInfo( NPC_PID_SmDeathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        break;
    case 6:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = 1;
        eInfo.AddCaveMobInfo( NPC_PID_Deathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        break;
    case 7:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 5, 8 );
        eInfo.AddCaveMobInfo( NPC_PID_GreaterMolerat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_GENERAL_ANIMALS, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_MutatedMolerat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_GENERAL_ANIMALS, TEAM_Mob0 );
        break;
    case 8:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 5, 8 );
        eInfo.AddCaveMobInfo( NPC_PID_RegularPigRat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_GENERAL_ANIMALS, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_MutatedPigrat, SCRIPT_ECRAT, BAG_Empty, AIPACKET_GENERAL_ANIMALS, TEAM_Mob0 );
        break;
    case 9:
        eInfo.IsSpecial = true;
        eInfo.AddCaveMobInfo( NPC_PID_SmallSilverGecko, SCRIPT_GECKO, BAG_Empty, AIPACKET_GECKO, TEAM_Mob0 );
        eInfo.MobsNum = Random( 5, 8 );
        break;
    case 10:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 5, 8 );
        eInfo.AddCaveMobInfo( NPC_PID_SmallRadscorpion, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_LargeRadscorpion, SCRIPT_SCORP, BAG_Empty, AIPACKET_SCORPION, TEAM_Mob0 );
        break;
    case 11:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 3, 5 );
        eInfo.AddCaveMobInfo( NPC_PID_SmDeathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_SmToughDeathclaw, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        break;
    case 12:
        eInfo.IsSpecial = true;
        eInfo.MobsNum = Random( 5, 8 );
        eInfo.AddCaveMobInfo( NPC_PID_MutatedRat, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        eInfo.AddCaveMobInfo( NPC_PID_RegularRat, SCRIPT_DCLAW, BAG_Empty, AIPACKET_DEATHCLAW, TEAM_Mob0 );
        break;
    default:
        return;
    }
}


void GenerateCavernEncounter( Map @ map, Critter@[] @ critters )
{
    if( !valid( map ) || !valid( critters ) )
        return;
    CCaveEncounterInfo@ eInfo = SetupEncounterCave( map, critters );
    if( valid( eInfo ) )
        eInfo.FillMap( map, critters );
}

void _CaveInCritter( Map& map, Critter& cr )
{
    if( cr.IsPlayer() )
    {
        CreateTimeEvent( __FullSecond + REAL_SECOND( 3 ), "e_PlayerHere", cr.Id, false );
    }
}

uint e_PlayerHere( uint[] @ values )
{
    Critter @ cr = GetCritter( values[ 0 ] );
    if( valid( cr ) && cr.IsPlayer() )
    {
        cr.SendMessage( MESSAGE_ATTACK, cr.Id, MESSAGE_TO_WHO_SEES_ME );
        cr.SendMessage( MESSAGE_ATTACK, cr.Id, MESSAGE_TO_I_SEE );
    }
    return 0;
}

void _CaveNpcInit( Critter& cr, bool firstTime )
{
    cr.ModeBase[ MODE_NO_HOME ] = 1;
    cr.StatBase[ ST_REPLICATION_TIME ] = -1;
    _MobInit( cr, firstTime );
}

void _CaveNpcShowCritter( Critter& cr, Critter& showCrit )
{
    if( showCrit.IsPlayer() )
    {
        AddAttackPlane( cr, 0, showCrit, __RunOnCombat );
    }
}
