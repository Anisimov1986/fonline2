#include "_macros.fos"
#include "follower_h.fos"
#include "lexems_h.fos"
#include "utils_h.fos"

void ClearFollowersEnemy(Critter& player, Critter& target)
{
    array<Critter@> crits;
    uint            numcrits = player.GetMap().GetCritters(0, FIND_ALL | FIND_ONLY_NPC, crits);

    for(uint i = 0; i < numcrits; i++)
        if(IsOwnersFollower(player, crits[i]))
        {
            crits[i].EraseEnemyFromStack(target.Id);
            crits[i].ErasePlane(AI_PLANE_ATTACK, true);
        }
}

bool IsOwnersFollower(Critter& owner, Critter& critter)
{
    if(!_IsFollower(critter))
        return false;

    return(uint(critter.FollowerVar[FV_MASTER]) == owner.Id);
}

bool CanHaveMoreFollowers(Critter& player, uint FollowerType)
{
    /*
	if(player.Trait[TRAIT_LONER] == 1)
        return false;

    if(FollowerType == FOLLOWER_TYPE_SLAVE)
    {
        if(player.Trait[TRAIT_GOOD_NATURED] == 1)
            return false;

        uint Slaves = GetNumberOfType(player, FOLLOWER_TYPE_SLAVE);
        return(Slaves < 2 + GetNumberOfMercs(player) + GetNumberOfCompanions(player));
    }
    else if(FollowerType == FOLLOWER_TYPE_BRAHMIN)
	*/
	if(FollowerType == FOLLOWER_TYPE_BRAHMIN)
    {
        uint Brahmin = GetNumberOfType(player, FOLLOWER_TYPE_BRAHMIN);
        return(Brahmin < 2);
    }
	/*
    else if(FollowerType == FOLLOWER_TYPE_MOLERAT)
    {
        uint Molerat = GetNumberOfType(player, FOLLOWER_TYPE_MOLERAT);
        return(Molerat < 1 + (GetNumberOfType(player, FOLLOWER_TYPE_PIGRAT) / 2));
    }
    else
    {
        return GetPartyPointsUsed(player) + GetPartyPoints(FollowerType) <= GetPartyPointsMax(player);
    }
	*/
	return false;
}

/**
 * Checks how many followers a player has of a certain FollowerType.
 */
uint GetNumberOfType(Critter& player, uint FollowerType)
{
    array<Critter@> crits;
    GetFollowers(player, true, crits);
    uint            count = 0;
    for(uint i = 0; i < crits.length(); i++)
    {
        if(GetFollowerType(crits[i]) == FollowerType)
            count++;
    }
    return count;
}

uint GetFollowerType(Critter& critter)
{
    return critter.FollowerVar[FV_TYPE];
}

int GetFollowers(Critter& player, Map@ map, array<Critter@>& followers)
{
    return GetFollowers(player, map, followers, false);
}

int GetFollowers(Critter& player, Map@ map, array<Critter@>& followers, bool OnlyIsSeen)
{
    if(!valid(map))
        return -1;
    int             followersn = 0;
    array<Critter@> crits;
    uint            n = map.GetCritters(0, FIND_ALL | FIND_ONLY_NPC, crits);
    for(uint i = 0; i < n; i++)
    {
        if(IsOwnersFollower(player, crits[i]))
        {
            if(OnlyIsSeen && !player.IsSee(crits[i]))
                continue;
            followersn++;
            followers.insertLast(crits[i]);
        }
    }
    return followersn;
}

/**
 * Retrieves followers belonging to player.
 * @param	all		    if true, then all followers are put in table, if false then only the active ones.
 * @param    followers   Array to hold the retrieved followers.
 * @return   Number of followers found.
 */
int GetFollowers(Critter& player, bool all, array<Critter@>& followers)
{
    for(uint i = FOLLOWER_BEGIN; i <= FOLLOWER_END; i++)
    {
        if(player.Followers[i] != 0)
        {
            Critter@ cr = GetCritter(player.Followers[i]);
            if(!valid(cr))
            {
                player.FollowersBase[i] = 0;
                continue;
            }
            if(all || IsFollowing(cr))
                followers.insertLast(cr);
        }
    }
    return followers.length();
}

/**
 * Check if a follower is in follow mode (either automatic or manual).
 */
bool IsFollowing(Critter& critter)
{
    return(((critter.FollowerVar[FV_MODE] == FOLLOWMODE_FOLLOW) || (critter.FollowerVar[FV_MODE] == FOLLOWMODE_FOLLOW_CONTROL)) && (critter.Cond != COND_DEAD));
}

/**
 * Makes the critter a follower to the specified owner.
 */
bool MakeFollower(Critter& critter, uint type, string& script, uint dialogid, Critter& owner, bool FreeBarter)
{
    if(script == "")
        script = "follower@critter_init";

    critter.FollowerVarBase[FV_MASTER] = owner.Id;
    critter.FollowerVarBase[FV_TYPE] = type;
    critter.StatBase[ST_REPLICATION_TIME] = REPLICATION_DELETE; // yes
    if(FreeBarter)
        critter.StatBase[ST_FREE_BARTER_PLAYER] = owner.Id;
	/*
    if(type == FOLLOWER_TYPE_COMPANION)
    {
        string crName = GetStoredName(critter);
        SetLexem(critter, "$name", crName);
    }
	*/

    ClearEvents(critter);
    //DropDeleteEvent(critter);

    critter.SetBagRefreshTime((uint(-1)));
    critter.SetScript(script);
    critter.FollowerVarBase[FV_LAST_DIALOG_ID] = critter.Stat[ST_DIALOG_ID];
    critter.StatBase[ST_DIALOG_ID] = dialogid;
    SetGroupIndex(critter, GetGroupIndex(owner));
    _CritUnsetExtMode(critter, MODE_EXT_NO_DETERIORATION);
    _CritUnsetMode(critter, MODE_NO_BARTER);
    if(owner.Perk[PE_SPEAKER] != 0)
        SETFLAG(critter.FollowerVarBase[FV_FLAGS], FV_FLAG_MASTER_SPEAKER);

    bool assigned = AddToFollowerlist(owner, critter);
    if(!assigned)
        Log("Failed to assign NPC's id to master(" + owner.Id + ") followerlist");

    critter.RefreshVisible();

    return true;
}

//
/**
 * Critter is no longer follower a follower.
 * Removes the follower from a follower slot and assigns a neutral dialog.
 * @return If successfully disbanded, true, otherwise false.
 */
bool DisbandFollower(Critter& player, Critter& cr, bool reset)
{
    for(uint i = FOLLOWER_BEGIN; i <= FOLLOWER_END; i++)
    {
        if(player.Followers[i] == int(cr.Id))
        {
            cr.StatBase[ST_FREE_BARTER_PLAYER] = 0;
            SetGroupInfo(cr, FACTION_None, 0, 0);
            cr.FollowerVarBase[FV_MASTER] = 0;
            player.FollowersBase[i] = 0;

            if(reset)
            {
                //cr.StatBase[ST_DIALOG_ID] = (cr.FollowerVar[FV_LAST_DIALOG_ID] > 0 ? cr.FollowerVar[FV_LAST_DIALOG_ID] : DIALOG_all_traveller);
				cr.StatBase[ST_DIALOG_ID] =  cr.FollowerVar[FV_LAST_DIALOG_ID];
                ClearEvents(cr);
                _CritUnsetExtMode(cr, MODE_EXT_FOLLOWER);
                cr.SetScript("");
                cr.RefreshVisible();
            }

            return true;
        }
    }
    return false;
}

/**
 * Assign follower's id to the list of followers.
 */
bool AddToFollowerlist(Critter& master, Critter& follower)
{
    for(uint i = FOLLOWER_BEGIN; i <= FOLLOWER_END; i++)
    {
        if(master.Followers[i] == 0)
        {
            master.FollowersBase[i] = follower.Id;
            return true;
        }
    }
    return false;
}