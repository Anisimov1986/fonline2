// Author: cvet
// Radiation generic map
#include "_macros.fos"

import void AffectRadiation( Critter& cr, int value ) from "radiation";

#define RADIATION_LOOP        ( 10000 ) // Radiation damage time, in milliseconds
#define RADIATION_DOSE_MIN    ( 5 )
#define RADIATION_DOSE_MAX    ( 20 )


void _LowRadiation( Map& map, bool firstTime )
{
    map.SetLoopTime( 0, RADIATION_LOOP );
    map.SetData( 62, RADIATION_DOSE_MIN );
    map.SetData( 63, RADIATION_DOSE_MAX );
    map.SetEvent( MAP_EVENT_LOOP_0, "_MapLoop0" );
}

void _MediumRadiation( Map& map, bool firstTime )
{
    map.SetLoopTime( 0, RADIATION_LOOP );
    map.SetData( 62, RADIATION_DOSE_MIN * 2 );
    map.SetData( 63, RADIATION_DOSE_MAX * 2);
    map.SetEvent( MAP_EVENT_LOOP_0, "_MapLoop0" );
}

void _HighRadiation( Map& map, bool firstTime )
{
    map.SetLoopTime( 0, RADIATION_LOOP );
    map.SetData( 62, RADIATION_DOSE_MIN * 10 );
    map.SetData( 63, RADIATION_DOSE_MAX * 5 );
    map.SetEvent( MAP_EVENT_LOOP_0, "_MapLoop0" );
}

void _DeadlyRadiation( Map& map, bool firstTime )
{
    map.SetLoopTime( 0, RADIATION_LOOP );
    map.SetData( 62, RADIATION_DOSE_MIN * 20 );
    map.SetData( 63, RADIATION_DOSE_MAX * 10 );
    map.SetEvent( MAP_EVENT_LOOP_0, "_MapLoop0" );
}

void _MapLoop0( Map& map )
{
    AffectRadiationToAllCritters( map, 0 );
    map.SetLoopTime( 0, RADIATION_LOOP );
}

void AffectRadiationToAllCritters( Map& map, int value )
{
    if( value == 0 )
        value = Random( map.GetData( 62 ), map.GetData( 63 ) );

    Critter@[] critters;
    map.GetCritters( 0, FIND_LIFE_AND_KO, critters );
    for( uint i = 0, j = critters.length(); i < j; i++ )
        AffectRadiation( critters[ i ], value );
}
