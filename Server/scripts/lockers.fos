// Author: cvet
// Doors and keys stuff.
#include "_macros.fos"
#include "_msgstr.fos"

import void PlayOpenLockerSound(Item& locker) from "sounds";
import void PlayCloseLockerSound(Item& locker) from "sounds";
import void PlayLockedLockerSound(Item& locker) from "sounds";
import void OnAutoOpen(Item& locker) from "doors";
import void OnAutoClose(Item& locker) from "doors";
import void TryPickupContainer(Critter& cr, Item& locker) from "movable_container";
import void TryRotateContainer(Critter& cr, Item& locker) from "movable_container";

import bool HasItemInHands(Critter@ cr, uint pid) from "utils";
import bool HasItemsInHands(Critter@ cr, uint pid1, uint pid2) from "utils";

import bool UseSkillOnTrappedItem( Critter& cr, Item& trappedItem, int skill ) from "trap";
import bool _TryRemoveTrap( Item& door, Critter& player ) from "trap";

import bool TryOpenElock( Critter& cr, Item& locker) from "elock";
import bool LockPickElock( Critter& cr, Item& locker) from "elock";

import bool TryPreSpawnItems(Critter& cr, Item& container) from "container_item_respawn";
import void TryPreLock(Item& container) from "container_item_respawn";

bool UseItemOnLocker( Critter& cr, Item& locker, Item& item ) // Export
{
    return true;
}

bool UseSkillOnLocker( Critter& cr, Item& locker, int skill, bool password ) // Export
{
    Map@ map = cr.GetMap();
    if( not valid( map ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
        return true;
    }

	ProtoItem@ proto = GetProtoItem(locker.GetProtoId());
    if (locker.GetType() == ITEM_TYPE_CONTAINER)
        TryPreLock(locker);
    if( skill == SKILL_PICK_ON_GROUND )
    {
        if( locker.GetType() == ITEM_TYPE_DOOR )
        {
            // NoOpen
            if( FLAG( locker.LockerCondition, LOCKER_NOOPEN ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY );
                return true;
            }

            // Critter on hex
            if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) && (valid( map.GetCritter( locker.HexX, locker.HexY ) ) || uint(locker.Val9) > __FullSecond))
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
                return true;
            }

            // Check key
            if( !FLAG( locker.LockerCondition, LOCKER_ISOPEN ) && locker.LockerId != 0 && 
				!FLAG( locker.LockerCondition, LOCKER_SPECIAL ) && !FLAG( locker.LockerCondition, LOCKER_GUARDED ) &&
                !FLAG( locker.LockerCondition, LOCKER_BROKEN ) && !FLAG( locker.LockerCondition, LOCKER_ELOCK) &&
                !IsKeyAviable( cr, locker.LockerId, false ) )
            {
				PlayLockedLockerSound(locker);
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY );
                return true;
            }
			
			if (FLAG( locker.LockerCondition, LOCKER_SPECIAL ) && !IsSecialKeyAviable( cr, locker.LockerId ))
			{
				PlayLockedLockerSound(locker);
				string lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( locker.LockerId ) + "@";
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_DOOR_NEED_SPECIAL_KEY, lexem );
				return true;
			}
			
			if (FLAG( locker.LockerCondition, LOCKER_GUARDED) && IsGuardsAlive( cr, locker.LockerId))
			{
				PlayLockedLockerSound(locker);
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_GUARDED);
				return true;
			}

            if (FLAG( locker.LockerCondition, LOCKER_ELOCK ) && !FLAG( locker.LockerCondition, LOCKER_ISOPEN))  
            {    
                if( _CritFingersDoorId( cr.Id ) == locker.LockerId || password == true )
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 705, "$pass" +locker.Val7 );
                else 
                {
                    TryOpenElock(cr, locker);
                    return true;
                }
            }

            // Change state
            if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
            {
				PlayCloseLockerSound(locker);
                locker.LockerClose();
                OnAutoClose(locker);
				cr.RefreshVisible();
                locker.Val9=__FullSecond+REAL_SECOND(3);
			}
            else
            {
				PlayOpenLockerSound(locker);
                locker.LockerOpen();
                OnAutoOpen(locker);
				cr.RefreshVisible();
			}
        }
        else if( locker.GetType() == ITEM_TYPE_CONTAINER )
        {
            // NoOpen
            if( FLAG( locker.LockerCondition, LOCKER_NOOPEN ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY );
                return true;
            }
            // Check key
            if( !FLAG( locker.LockerCondition, LOCKER_ISOPEN ) && locker.LockerId != 0 && 
				!FLAG( locker.LockerCondition, LOCKER_SPECIAL ) && !FLAG( locker.LockerCondition, LOCKER_GUARDED ) &&
                !FLAG( locker.LockerCondition, LOCKER_BROKEN ) && !FLAG( locker.LockerCondition, LOCKER_ELOCK ) &&
                !IsKeyAviable( cr, locker.LockerId, false ) )
            {
				PlayLockedLockerSound(locker);
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY );
                return true;
            }

			if (FLAG( locker.LockerCondition, LOCKER_SPECIAL ) && !IsSecialKeyAviable( cr, locker.LockerId ))
			{
				PlayLockedLockerSound(locker);
				string lexem = "$itemname" + "@msg ITEM " + STR_ITEM_NAME( locker.LockerId ) + "@";
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_SPECIAL_KEY, lexem );
				return true;
			}
			
			if (FLAG( locker.LockerCondition, LOCKER_GUARDED) && IsGuardsAlive( cr, locker.LockerId))
			{
				PlayLockedLockerSound(locker);
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_GUARDED);
				return true;
			}

			if (UseSkillOnTrappedItem( cr, locker, SKILL_PICK_ON_GROUND ))
			{
				return false;
			}

            if (FLAG( locker.LockerCondition, LOCKER_ELOCK ) && !FLAG( locker.LockerCondition, LOCKER_ISOPEN))
            {    
                if( _CritFingersDoorId( cr.Id ) == locker.LockerId || password == true )
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 705, "$pass" +locker.Val7 );
                else 
                {
                    TryOpenElock(cr, locker); 
                    return true;
                }
            }

            // Is changeble
            if( locker.Proto.Container_Changeble )
            {
                // Change state
                if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
                {
                    if (cr.IsPlayer())
                    {
                        if (!TryPreSpawnItems(cr,locker))
                            cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
                    }
                    else
                    {
                        locker.LockerClose();
                        OnAutoClose(locker);
                    }
				}
                else
                {
					PlayOpenLockerSound(locker);
                    locker.LockerOpen();
                    OnAutoOpen(locker);
                    if (!TryPreSpawnItems(cr,locker))
                        cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
                }
            }
            // No changeble
            else
            {
                if (!TryPreSpawnItems(cr,locker))
                    cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
            }
        }
    }
    else if( skill == SK_STEAL )
    {
        if( locker.GetType() == ITEM_TYPE_CONTAINER && FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
        {
		  	PlayCloseLockerSound(locker);
            locker.LockerClose();
		}
        else
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
    }
    else if( skill == SK_LOCKPICK )
    {
        if(Lockpick(cr, locker))
        {
            PlayOpenLockerSound(locker);
            if( locker.GetType() != ITEM_TYPE_CONTAINER || locker.Proto.Container_Changeble )
            {
                locker.LockerOpen();
                OnAutoOpen(locker);
            }
            if( locker.GetType() == ITEM_TYPE_CONTAINER )
            {
                if (!TryPreSpawnItems(cr,locker))
                    cr.ShowContainer( null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
            }
            //cr.StatBase[ ST_EXPERIENCE ] += 50;
            cr.AddScore( SCORE_CRACKER, 1 );
        }
    }
	else if(skill == SK_SCIENCE)
    {
        TryPickupContainer(cr, locker);
    }
    else if(skill == SK_REPAIR)
    {
        TryRotateContainer(cr, locker);
    }
    else if( skill == SK_TRAPS )
    {	
		// Doors & container traps
		if (_TryRemoveTrap( locker, cr ))
		{
			return true;
		}
	}
    else if( skill == SKILL_TAKE_ALL_CONT )
    {
        return false;
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
    }
    return true;
}

//import bool Lockpick(Critter& cr, Item& locker) from "lockers";
bool Lockpick(Critter& cr, Item& locker)
{
	// NoOpen
	if( FLAG( locker.LockerCondition, LOCKER_NOOPEN ) || FLAG( locker.LockerCondition, LOCKER_SPECIAL ) || FLAG( locker.LockerCondition, LOCKER_GUARDED ))
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_NO_LOCKPICK );
		return false;
	}
	

	if( cr.Timeout[ TO_SK_LOCKPICK ] > 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS );
		return false;
	}

	if( locker.LockerId == 0 || FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING );
		return false;
	}
	
	// Doors & container traps
	if (UseSkillOnTrappedItem( cr, locker, SK_LOCKPICK ))
	{
		return false;
	}

	int base = cr.Skill[ SK_LOCKPICK ] - locker.LockerComplexity;

    if (FLAG( locker.LockerCondition, LOCKER_ELOCK ))
        return LockPickElock(cr, locker);

	if( FLAG( locker.LockerCondition, LOCKER_ELECTRO ) && !HasItemsInHands(cr, PID_ELECTRONIC_LOCKPICKS, PID_ELEC_LOCKPICK_MKII))
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_NEED_ELECTRO );
		return false;
	}

	if( HasItemInHands(cr, PID_LOCKPICKS ))
	{
		base += 25;
		if( Random( 0, 30 ) == 0 )
			cr.DeleteItem( PID_LOCKPICKS, 1 );
	}
	else if( HasItemInHands(cr, PID_EXP_LOCKPICK_SET ))
	{
		base += 50;
		if( Random( 0, 30 ) == 0 )
			cr.DeleteItem( PID_EXP_LOCKPICK_SET, 1 );
	}
	else if( HasItemInHands(cr, PID_ELECTRONIC_LOCKPICKS ))
	{
		base += 25;
		if( Random( 0, 30 ) == 0 )
			cr.DeleteItem( PID_ELECTRONIC_LOCKPICKS, 1 );
	}
	else if( HasItemInHands(cr, PID_ELEC_LOCKPICK_MKII ))
	{
		base += 50;
		if( Random( 0, 30 ) == 0 )
			cr.DeleteItem( PID_ELEC_LOCKPICK_MKII , 1 );
	}
	cr.TimeoutBase[ TO_SK_LOCKPICK ] = LOCKPICK_TIMEOUT( cr );
	base = CLAMP( base, 0, 95 );
	if (base >= Random( 1, 100 ))
		return true;
	else 
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_LOCKPICK_FAIL );
		return false;
	}
}

//import bool IsKeyAviable( Critter& cr, uint lockerId ) from "lockers";
bool IsKeyAviable( Critter& cr, uint lockerId, bool toDelete ) // Export
{
    if( lockerId == 0 )
        return true;
    if( _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return true;
    Item@[] keys;
    for( uint i = 0, j = cr.GetItemsByType( ITEM_TYPE_KEY, keys ); i < j; i++ )
    {
        if( keys[ i ].LockerId == lockerId )
        {
            if (toDelete)
                DeleteItem( keys[ i ] );
            return true;
        }
    }
    return false;
}

bool IsSecialKeyAviable( Critter& cr, uint lockerId ) 
{
    if( lockerId == 0 )
        return true;
    Item@[] keys;
    for( uint i = 0, j = cr.GetItemsByType( ITEM_TYPE_KEY, keys ); i < j; i++ )
        if( keys[ i ].GetProtoId () == lockerId )
		{
            if (keys[ i ].Val9 > 0 && uint(keys[ i ].Val9) < __FullSecond)
			{
				cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME , 10106);
				DeleteItem( keys[ i ] );
				return false;
			}
			return true;
		}
    return false;
}

bool IsGuardsAlive( Critter& cr, int lockerId ) 
{
	Map@ map = cr.GetMap();
	if (!valid(map))
		return true;
        
    if (map.GetNpcCount(lockerId, FIND_LIFE_AND_KO | FIND_ONLY_NPC)>0)
        return true;
    return false;
}

uint GetKeyId( Critter& cr, uint lockerId ) // Export
{
    if( lockerId == 0 || _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return 0;
    Item@[] keys;
    for( uint i = 0, j = cr.GetItemsByType( ITEM_TYPE_KEY, keys ); i < j; i++ )
        if( keys[ i ].LockerId == lockerId )
            return keys[ i ].Id;
    return 0;
}

void SwitchState( Item& locker ) // Export
{
    if( locker.GetType() == ITEM_TYPE_DOOR || locker.GetType() == ITEM_TYPE_CONTAINER )
    {
            // Change state
            if( FLAG( locker.LockerCondition, LOCKER_ISOPEN ) )
            {
				PlayCloseLockerSound(locker);
                locker.LockerClose();
			}
            else
            {
				PlayOpenLockerSound(locker);
                locker.LockerOpen();
			}
    }
}

void FixState( Item& locker ) // Export
{
    if( locker.GetType() == ITEM_TYPE_DOOR || locker.GetType() == ITEM_TYPE_CONTAINER )
    {
			locker.LockerOpen();
			
				if(_LockerIsOpen(locker))
				{
					locker.LockerClose();
				}	
    }
}