// Author: cvet
#ifdef __CLIENT // Macro defined in client_main.fos
# define Critter            CritterCl
#endif

#include "_macros.fos"

#ifndef __CLIENT
import int NextLevelNeedExp( Critter& cr )  from "parameters";
import void CrSpeedCalc( Critter& cr )  from "main";
#endif


bool PerkCheck( Critter& cr, uint perk ) // Export
{
    #define PROCESS_PERK0                   \
        # ( perk, range, level ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level )
    #define PROCESS_PERK1                            \
        # ( perk, range, level, demand0 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 )
    #define PROCESS_PERK2                                     \
        # ( perk, range, level, demand0, demand1 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 )
    #define PROCESS_PERK3                                              \
        # ( perk, range, level, demand0, demand1, demand2 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 )
    #define PROCESS_PERK4                                                       \
        # ( perk, range, level, demand0, demand1, demand2, demand3 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 )
    #define PROCESS_PERK5                                                                \
        # ( perk, range, level, demand0, demand1, demand2, demand3, demand4 ) case perk: \
        return ( cr.ParamBase[ perk ] < range && cr.ParamBase[ ST_LEVEL ] >= level && demand0 && demand1 && demand2 && demand3 && demand4 )
    switch( perk )
    {
        // Perks
//      PROCESS_PERK1( PE_AWARENESS,           1,  3, cr.ParamBase[ ST_PERCEPTION ] >= 5    ); 										 //DONE
		PROCESS_PERK0( PE_ANTICRIT,            1,  3  ); 																		     //DONE
        PROCESS_PERK1( PE_BONUS_HTH_ATTACKS,   1, 15, cr.ParamBase[ ST_AGILITY ] >= 6       );										 //DONE
        PROCESS_PERK2( PE_BONUS_HTH_DAMAGE,    1,  3, cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ ST_STRENGTH ] >= 6      ); //DONE
//      PROCESS_PERK1( PE_BONUS_MOVE,          2,  6, cr.ParamBase[ ST_AGILITY ] >= 5       ); 										 //DONE
        PROCESS_PERK2( PE_BONUS_RANGED_DAMAGE, 2,  6, cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ ST_LUCK ] >= 6          ); //DONE
        PROCESS_PERK3( PE_BONUS_RATE_OF_FIRE,  1, 15, cr.ParamBase[ ST_AGILITY ] >= 7,      cr.ParamBase[ ST_INTELLECT ] >= 6,    cr.ParamBase[ ST_PERCEPTION ] >= 6 ); //DONE
        PROCESS_PERK1( PE_EARLIER_SEQUENCE,    1,  3, cr.ParamBase[ ST_PERCEPTION ] >= 6    ); 										 //DONE
//      PROCESS_PERK1( PE_FASTER_HEALING,      3,  3, cr.ParamBase[ ST_ENDURANCE ] >= 6     ); 										 //DONE SUP 
        PROCESS_PERK1( PE_MORE_CRITICALS,      2,  6, cr.ParamBase[ ST_LUCK ] >= 6          );										 //DONE
//		PROCESS_PERK2( PE_MORE_CRITICALS2,      1,  6, cr.ParamBase[ ST_LUCK ] >= 6,        cr.Perk[ PE_MORE_CRITICALS ] !=0 );		 //DONE
//      PROCESS_PERK2( PE_RAD_RESISTANCE,      2,  6, cr.ParamBase[ ST_ENDURANCE ] >= 6,    cr.ParamBase[ ST_INTELLECT ] >= 4     ); //DONE SUP 
        PROCESS_PERK1( PE_TOUGHNESS,           2,  3, cr.ParamBase[ ST_ENDURANCE ] >= 6		);										 //DONE
//      PROCESS_PERK2( PE_STRONG_BACK,         1,  3, cr.ParamBase[ ST_STRENGTH ] >= 6,     cr.ParamBase[ ST_ENDURANCE ] >= 6     ); //DONE
        PROCESS_PERK2( PE_SHARPSHOOTER,        1,  9, cr.ParamBase[ ST_PERCEPTION ] >= 7,   cr.ParamBase[ ST_INTELLECT ] >= 6     ); //DONE
        PROCESS_PERK2( PE_SILENT_RUNNING,      1,  6, cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ SK_SNEAK ] >= 50        ); //DONE
//      PROCESS_PERK3( PE_SURVIVALIST,         3,  3, cr.ParamBase[ ST_ENDURANCE ] >= 6,    cr.ParamBase[ ST_INTELLECT ] >= 6,    cr.ParamBase[ SK_OUTDOORSMAN ] >= 40 );
//      PROCESS_PERK2( PE_MASTER_TRADER,       1,  9, cr.ParamBase[ ST_CHARISMA ] >= 7,     cr.ParamBase[ SK_BARTER ] >= 60       ); //
        PROCESS_PERK1( PE_EDUCATED,            1,  6, cr.ParamBase[ ST_INTELLECT ] >= 6     );										 //DONE
        PROCESS_PERK4( PE_HEALER,              2,  3, cr.ParamBase[ ST_PERCEPTION ] >= 7,   cr.ParamBase[ ST_AGILITY ] >= 6,      cr.ParamBase[ ST_INTELLECT ] >= 5,        cr.ParamBase[ SK_FIRST_AID ] >= 40 );
    	PROCESS_PERK3( PE_BETTER_CRITICALS,    1, 12, cr.ParamBase[ST_PERCEPTION]>=7,       cr.ParamBase[ST_LUCK]>=7,             cr.ParamBase[ST_AGILITY]>=4); //DONE
// 		PROCESS_PERK5( PE_SLAYER,              1, 24, cr.ParamBase[ ST_AGILITY ] >= 8,      cr.ParamBase[ ST_STRENGTH ] >= 8,     cr.ParamBase[ SK_UNARMED ] >= 80,         cr.ParamBase[ PE_SNIPER ] == 0,            cr.ParamBase[ PE_TERMINATOR ] == 0 );
//  	PROCESS_PERK5( PE_SNIPER,              1, 24, cr.ParamBase[ ST_AGILITY ] >= 8,      cr.ParamBase[ ST_PERCEPTION ] >= 8,   cr.ParamBase[ SK_SMALL_GUNS ] >= 80,      cr.ParamBase[ PE_SLAYER ] == 0,            cr.ParamBase[ PE_TERMINATOR ] == 0 );
        PROCESS_PERK3( PE_SILENT_DEATH,        1, 18, cr.ParamBase[ ST_AGILITY ] >= 10,     cr.ParamBase[ SK_SNEAK ] >= 80,       cr.ParamBase[ SK_UNARMED ] >= 80 ); //DONE
        PROCESS_PERK1( PE_ACTION_BOY,          2, 12, cr.ParamBase[ ST_AGILITY ] >= 5       ); 										 //DONE
        PROCESS_PERK1( PE_LIFEGIVER,           2, 12, cr.ParamBase[ ST_ENDURANCE ] >= 4      );										 //DONE
        PROCESS_PERK1( PE_DODGER,              1,  9, cr.ParamBase[ ST_AGILITY ] >= 6       );										 //DONE
//      PROCESS_PERK1( PE_SNAKEATER,           2,  6, cr.ParamBase[ ST_ENDURANCE ] >= 3     ); 										 //DONE SUP
        PROCESS_PERK2( PE_MR_FIXIT,            1, 12, cr.ParamBase[ SK_REPAIR ] >= 40,      cr.ParamBase[ SK_SCIENCE ] >= 40      );
        PROCESS_PERK2( PE_MEDIC,               1, 12, cr.ParamBase[ SK_FIRST_AID ] >= 40,   cr.ParamBase[ SK_DOCTOR ] >= 40       ); //DONE
        PROCESS_PERK2( PE_MASTER_THIEF,        1, 12, cr.ParamBase[ SK_STEAL ] >= 50,       cr.ParamBase[ SK_LOCKPICK ] >= 50     );
//      PROCESS_PERK1( PE_SPEAKER,             1,  9, cr.ParamBase[ SK_SPEECH ] >= 50       );
//      PROCESS_PERK0( PE_HEAVE_HO,            2,  6  );
        PROCESS_PERK2( PE_PICKPOCKET,          1, 15, cr.ParamBase[ ST_AGILITY ] >= 8,      cr.ParamBase[ SK_STEAL ] >= 80 );
        PROCESS_PERK1( PE_GHOST,               1,  6, cr.ParamBase[ SK_SNEAK ] >= 60        );
//      PROCESS_PERK0( PE_EXPLORER,            1,  9  );																			 //DONE SUP
//      PROCESS_PERK2( PE_PATHFINDER,          1,  6, cr.ParamBase[ ST_ENDURANCE ] >= 6,    cr.ParamBase[ SK_OUTDOORSMAN ] >= 40  ); //DONE
//      PROCESS_PERK1( PE_SCOUT,               1,  3, cr.ParamBase[ ST_PERCEPTION ] >= 7    );
//      PROCESS_PERK1( PE_RANGER,              1,  6, cr.ParamBase[ ST_PERCEPTION ] >= 6    );
        PROCESS_PERK1( PE_QUICK_POCKETS,       1,  3, cr.ParamBase[ ST_AGILITY ] >= 5       ); 										 //DONE QUICK HANDS
//      PROCESS_PERK2( PE_SMOOTH_TALKER,       3,  3, cr.ParamBase[ ST_INTELLECT ] >= 4,    cr.ParamBase[ ST_INTELLECT ] < 10     ); //
//      PROCESS_PERK1( PE_SWIFT_LEARNER,       3,  3, cr.ParamBase[ ST_INTELLECT ] >= 4     ); 										 //DONE SUPPORT
        PROCESS_PERK1( PE_ADRENALINE_RUSH,     1,  6, cr.ParamBase[ ST_STRENGTH ] < 10      );										 //DONE
        PROCESS_PERK1( PE_CAUTIOUS_NATURE,     1,  3, cr.ParamBase[ ST_PERCEPTION ] >= 6    );
//      PROCESS_PERK1( PE_COMPREHENSION,       1,  3, cr.ParamBase[ ST_INTELLECT ] >= 6     ); //Book reading for later
//      PROCESS_PERK2( PE_DEMOLITION_EXPERT,   1,  9, cr.ParamBase[ ST_AGILITY ] >= 4,      cr.ParamBase[ SK_TRAPS ] >= 75        );
//      PROCESS_PERK1( PE_GAMBLER,             1,  6, cr.ParamBase[ SK_GAMBLING ] >= 50     );
        PROCESS_PERK1( PE_GAIN_STRENGTH,       1, 12, cr.ParamBase[ ST_STRENGTH ] < 9      );										//DONE
        PROCESS_PERK1( PE_GAIN_PERCEPTION,     1, 12, cr.ParamBase[ ST_PERCEPTION ] < 9    );										//DONE
        PROCESS_PERK1( PE_GAIN_ENDURANCE,      1, 12, cr.ParamBase[ ST_ENDURANCE ] < 9     );										//DONE
        PROCESS_PERK1( PE_GAIN_CHARISMA,       1, 12, cr.ParamBase[ ST_CHARISMA ] < 9      );										//DONE
        PROCESS_PERK1( PE_GAIN_INTELLIGENCE,   1, 12, cr.ParamBase[ ST_INTELLECT ] < 9     );										//DONE
        PROCESS_PERK1( PE_GAIN_AGILITY,        1, 12, cr.ParamBase[ ST_AGILITY ] < 9       );										//DONE
        PROCESS_PERK1( PE_GAIN_LUCK,           1, 12, cr.ParamBase[ ST_LUCK ] < 9          );										//DONE
        PROCESS_PERK1( PE_HARMLESS,            1,  6, cr.ParamBase[ SK_STEAL ] >= 50	   );
//      PROCESS_PERK0( PE_HERE_AND_NOW,        1,  9  );																			//
        PROCESS_PERK1( PE_HTH_EVADE,           1, 12, cr.ParamBase[ SK_UNARMED ] >= 75      );
//      PROCESS_PERK2( PE_KAMA_SUTRA_MASTER,   1,  3, cr.ParamBase[ ST_ENDURANCE ] >= 5,    cr.ParamBase[ ST_AGILITY ] >= 5       );//
//      PROCESS_PERK1( PE_KARMA_BEACON,        1,  9, cr.ParamBase[ ST_CHARISMA ] >= 6      );										//
        PROCESS_PERK2( PE_LIGHT_STEP,          1,  9, cr.ParamBase[ ST_AGILITY ] >= 5,      cr.ParamBase[ ST_LUCK ] >= 5          );//DONE
        PROCESS_PERK1( PE_LIVING_ANATOMY,      1, 12, cr.ParamBase[ SK_DOCTOR ] >= 60       );
        PROCESS_PERK0( PE_MAGNETIC_PERSONALITY, 1,  6 );																			//DONE
//      PROCESS_PERK2( PE_NEGOTIATOR,          1,  6, cr.ParamBase[ SK_SPEECH ] >= 50,      cr.ParamBase[ SK_BARTER ] >= 50       );
//      PROCESS_PERK0( PE_PACK_RAT,            1,  6  ); 																			//DONE SUPPORT
//      PROCESS_PERK1( PE_PYROMANIAC,          2,  9, cr.ParamBase[ SK_BIG_GUNS ] >= 75     ); 										//DONE
        PROCESS_PERK1( PE_QUICK_RECOVERY,      1,  3, cr.ParamBase[ ST_AGILITY ] >= 5       ); 										//DONE
//      PROCESS_PERK1( PE_SALESMAN,            1,  6, cr.ParamBase[ SK_BARTER ] >= 50       );										//
        PROCESS_PERK1( PE_STONEWALL,           1,  3, cr.ParamBase[ ST_STRENGTH ] >= 6      ); 										//DONE
        PROCESS_PERK0( PE_THIEF,               1,  3  );
        PROCESS_PERK1( PE_WEAPON_HANDLING,     1, 9, cr.ParamBase[ ST_AGILITY ] >= 5       ); 										//DONE
//  	PROCESS_PERK5( PE_TERMINATOR,          1, 24, cr.ParamBase[ ST_STRENGTH ] >= 8,     cr.ParamBase[ ST_ENDURANCE ] >= 8,    cr.ParamBase[ SK_DOCTOR ] >= 80,          cr.ParamBase[ PE_SNIPER ] == 0,            cr.ParamBase[ PE_SLAYER ] == 0 );
    default:
        break;
    }
    return false;
}

#ifndef __CLIENT
void PerkUp( Critter& cr, uint perk ) // Export
{
    # define PERKUP_STAT    # ( param, val )cr.StatBase[ param ] val
    # define PERKUP_SKILL                                                                      \
        # ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] > MAX_SKILL_VAL ) \
            cr.SkillBase[ param ] = MAX_SKILL_VAL
    switch( perk )
    {
    // Perks
    case PE_AWARENESS:         /*Examining a target shows hitpoints, weapon and ammunition count*/
        break;
	case PE_ANTICRIT:
		PERKUP_STAT( ST_ANTICRIT, +=18 );
        break;	
	case PE_BONUS_HTH_ATTACKS: /*-1 Ap on HtH attacks*/
        break;
    case PE_BONUS_HTH_DAMAGE:
        PERKUP_STAT( ST_MELEE_DAMAGE, += 10 );
        break;
    case PE_BONUS_MOVE:
        PERKUP_STAT( ST_MAX_MOVE_AP, += 2 );
        break;
    case PE_BONUS_RANGED_DAMAGE:    /*In calc damage +2 per range*/
        break;
    case PE_BONUS_RATE_OF_FIRE:     /*-1 Ap on ranged attacks*/
        break;
    case PE_EARLIER_SEQUENCE:
        PERKUP_STAT( ST_SEQUENCE, += 6 );
        break;
    case PE_FASTER_HEALING:
        PERKUP_STAT( ST_HEALING_RATE, += 8 );
        break;
    case PE_MORE_CRITICALS:
        PERKUP_STAT( ST_CRITICAL_CHANCE, += 8 );
        break;
	//case PE_MORE_CRITICALS2:
    //    PERKUP_STAT( ST_CRITICAL_CHANCE, += 8 );
    //    break;
    case PE_RAD_RESISTANCE:
        PERKUP_STAT( ST_RADIATION_RESISTANCE, += 30 );
        break;
    case PE_TOUGHNESS:
        PERKUP_STAT( ST_NORMAL_RESIST,  += 8 );
		PERKUP_STAT( ST_LASER_RESIST,   += 8 );
		PERKUP_STAT( ST_FIRE_RESIST,    += 8 );
		PERKUP_STAT( ST_PLASMA_RESIST,  += 8 );
		PERKUP_STAT( ST_EXPLODE_RESIST, += 8 );
		PERKUP_STAT( ST_ELECTRO_RESIST, += 8 );
        break;
    case PE_STRONG_BACK:
        PERKUP_STAT( ST_CARRY_WEIGHT, += LBS_TO_GRAMM( 50 ) );
        break;
    case PE_SHARPSHOOTER:
        PERKUP_STAT( ST_BONUS_LOOK, += 6 ); /*+2 perception on ranged attack*/ break;
    case PE_SILENT_RUNNING:     /*No steal off while running*/
        break;
    case PE_SURVIVALIST:
        PERKUP_SKILL( SK_OUTDOORSMAN, += 25 );
        break;
    case PE_MASTER_TRADER:     /*Barter k is zero on buy*/
        break;
    case PE_EDUCATED:
        PERKUP_STAT( ST_UNSPENT_SKILL_POINTS, += 2 ); /*+2 skill points per range*/ break;
    case PE_HEALER:     /*Additional Hp bonus in scripts*/
        break;
    case PE_BETTER_CRITICALS:
        PERKUP_STAT( ST_MAX_CRITICAL, += 20 );
        break;
    case PE_SLAYER:       /*All unarmed and melee attacks is critical*/
        break;
    case PE_SNIPER:       /*All gun attacks is critical*/
        break;
    case PE_SILENT_DEATH: /*Attack from sneak from back x2 damage*/
        break;
    case PE_ACTION_BOY:
        PERKUP_STAT( ST_ACTION_POINTS, += 1 );
        break;
    case PE_LIFEGIVER:
        PERKUP_STAT( ST_MAX_LIFE, += 40 );
        break;
    case PE_DODGER:
        PERKUP_STAT( ST_ARMOR_CLASS, += 40 );
        break;
    case PE_SNAKEATER:
        PERKUP_STAT( ST_POISON_RESISTANCE, += 50 );
        break;
    case PE_MR_FIXIT:
        PERKUP_SKILL( SK_REPAIR, += 10 );
        PERKUP_SKILL( SK_SCIENCE, += 10 );
        break;
    case PE_MEDIC:
        PERKUP_SKILL( SK_FIRST_AID, += 25 );
        PERKUP_SKILL( SK_DOCTOR, += 25 );
        break;
    case PE_MASTER_THIEF:
        PERKUP_SKILL( SK_STEAL, += 20 );
        PERKUP_SKILL( SK_LOCKPICK, += 20 );
        break;
    case PE_SPEAKER:
        PERKUP_SKILL( SK_SPEECH, += 40 );
        break;
//    case PE_HEAVE_HO:   /*+3 strength for throwing weapon*/
//        break;
    case PE_PICKPOCKET: /*Ignore size and facing while stealing*/
        break;
    case PE_GHOST:      /*+20% sneak on night*/
        break;
    case PE_EXPLORER:   /*Higher chance of finding special places and people in random encounters*/
        break;
    case PE_PATHFINDER: /*+20% speed on global per range*/
		PERKUP_SKILL( SK_OUTDOORSMAN, += 30 );
        break;
    case PE_SCOUT:      /*Ignore terrain.*/
        break;
    case PE_RANGER:
        PERKUP_SKILL( SK_OUTDOORSMAN, += 15 ); /*Fewer hostile random encounters*/ 
		break;
    case PE_QUICK_POCKETS:     /*Inventory items move ap cost div 2*/
        break;
    case PE_SMOOTH_TALKER:     /*+2 intellect on dialogs checks*/
        break;
    case PE_SWIFT_LEARNER:     /*+5% add experience per range*/
        break;
    case PE_ADRENALINE_RUSH:   /*+1 AP and +10 to all DR on <50% hp in battle*/
        break;
    case PE_CAUTIOUS_NATURE:   /*+3 perception on encounter generate*/
        break;
    case PE_COMPREHENSION:     /*50% more points on books reading*/
        break;
    case PE_DEMOLITION_EXPERT: /*Used in explosion script*/
        break;
    case PE_GAMBLER:
        PERKUP_SKILL( SK_GAMBLING, += 40 );
        break;
    case PE_GAIN_STRENGTH:
        PERKUP_STAT( ST_STRENGTH, +=2 );
        break;
    case PE_GAIN_PERCEPTION:
        PERKUP_STAT( ST_PERCEPTION, +=2 );
        break;
    case PE_GAIN_ENDURANCE:
        PERKUP_STAT( ST_ENDURANCE, +=2 );
        break;
    case PE_GAIN_CHARISMA:
        PERKUP_STAT( ST_CHARISMA, +=2 );
        break;
    case PE_GAIN_INTELLIGENCE:
        PERKUP_STAT( ST_INTELLECT, +=2 );
        break;
    case PE_GAIN_AGILITY:
        PERKUP_STAT( ST_AGILITY, +=2 );
        break;
    case PE_GAIN_LUCK:
        PERKUP_STAT( ST_LUCK, +=2 );
        break;
    case PE_HARMLESS:
        PERKUP_SKILL( SK_STEAL, += 40 );
        break;
    case PE_HERE_AND_NOW:      /*+1 level*/
        cr.StatBase[ ST_EXPERIENCE ] += NextLevelNeedExp( cr ) - cr.ParamBase[ ST_EXPERIENCE ];
        break;
    case PE_HTH_EVADE:         /*+3 ac per 1 ap on end turn*/
        break;
    case PE_KAMA_SUTRA_MASTER: /*In dialogs*/
        break;
    case PE_KARMA_BEACON:      /*Karma x2*/
        break;
    case PE_LIGHT_STEP:        /*50% less chance of setting off a trap*/
        break;
    case PE_LIVING_ANATOMY:
        PERKUP_SKILL( SK_DOCTOR, += 20 ); /*Also +5 dmg*/ break;
    case PE_MAGNETIC_PERSONALITY:     /*+2 people in group*/
        break;
    case PE_NEGOTIATOR:
        PERKUP_SKILL( SK_SPEECH, += 20 );
        PERKUP_SKILL( SK_BARTER, += 20 );
        break;
    case PE_PACK_RAT:
        PERKUP_STAT( ST_CARRY_WEIGHT, += LBS_TO_GRAMM( 50 ) );
        break;
    case PE_PYROMANIAC:     /*+50 damage on fire attack*/
        break;
    case PE_QUICK_RECOVERY: /* 1 ap for stending up*/
        break;
    case PE_SALESMAN:
        break;
    case PE_STONEWALL:     /*Reduction in chance to be knocked down during combat*/
        break;
    case PE_THIEF: /*Luck chance of no cooldown if a stealing attempt has failed, Steal Cd reduces by 10 sec*/
        //PERKUP_SKILL( SK_SNEAK, += 10 );
        //PERKUP_SKILL( SK_LOCKPICK, += 10 );
        //PERKUP_SKILL( SK_STEAL, += 10 );
        //PERKUP_SKILL( SK_TRAPS, += 10 );
        break;
    case PE_WEAPON_HANDLING:     /*In use weapon strength +3*/
        break;
    case PE_TERMINATOR:
        PERKUP_STAT( ST_EMP_RESIST, -= 1000 );
        break;
	case PE_IMPLANT_ENVIRONMENTAL:
		PERKUP_STAT( ST_RADIATION_RESISTANCE, += 50 );
		PERKUP_STAT( ST_POISON_RESISTANCE, += 40 );
		PERKUP_STAT( ST_HEALING_RATE, += 10 );
        break;
    case PE_IMPLANT_ACCURACY:
		PERKUP_STAT( ST_BONUS_LOOK, += 5 );
		PERKUP_SKILL( SK_BIG_GUNS, += 40 );
		PERKUP_SKILL( SK_SMALL_GUNS, += 40 );
		PERKUP_SKILL( SK_ENERGY_WEAPONS, += 40 );
        break;
    case PE_IMPLANT_DEFENCE:
		PERKUP_STAT( ST_NORMAL_RESIST,  += 4 );
		PERKUP_STAT( ST_LASER_RESIST,   += 4 );
		PERKUP_STAT( ST_FIRE_RESIST,    += 4 );
		PERKUP_STAT( ST_PLASMA_RESIST,  += 4 );
		PERKUP_STAT( ST_EXPLODE_RESIST, += 4 );
		PERKUP_STAT( ST_ELECTRO_RESIST, += 4 );
		PERKUP_STAT( ST_NORMAL_ABSORB,  += 2 );
		PERKUP_STAT( ST_LASER_ABSORB,   += 2 );
		PERKUP_STAT( ST_FIRE_ABSORB,    += 2 );
		PERKUP_STAT( ST_PLASMA_ABSORB,  += 2 );
		PERKUP_STAT( ST_EXPLODE_ABSORB, += 2 );
		PERKUP_STAT( ST_ELECTRO_ABSORB, += 2 );
        break;
    case PE_IMPLANT_MEDIC:
		PERKUP_SKILL( SK_FIRST_AID, += 50 );
		PERKUP_SKILL( SK_DOCTOR, += 50 );
		cr.PerkBase[PE_LIVING_ANATOMY] = 1;
        break;
    case PE_IMPLANT_ENGINEER:
		PERKUP_SKILL( SK_REPAIR, += 100 );
		PERKUP_SKILL( SK_SCIENCE, += 100 );
		PERKUP_SKILL( SK_ENERGY_WEAPONS, += 100 );
        break;
    case PE_IMPLANT_SPEED: // Adding +10% run speed (main.fos)
		PERKUP_STAT( ST_ACTION_POINTS, += 1 );
		PERKUP_STAT( ST_SEQUENCE, += 6 );
        CrSpeedCalc( cr );
        break;
    case PE_IMPLANT_SURVIVOR: //Adding +30% xp (experience.fos)
		PERKUP_SKILL( SK_OUTDOORSMAN, += 100 );
		PERKUP_STAT( ST_MAX_LIFE, += 30 );
        break;
    case PE_IMPLANT_MARKSMAN: //Adding +8 critroll(combat.fos)
		PERKUP_STAT( ST_CRITICAL_CHANCE, += 4 );
		PERKUP_STAT( ST_BONUS_LOOK, += 2 );
        break;
    case PE_IMPLANT_SCOUT:
		PERKUP_SKILL( SK_SNEAK, += 50 );
		PERKUP_STAT( ST_ARMOR_CLASS, += 30 );
        break;
    case PE_IMPLANT_ENCHACEMENT:
		PERKUP_STAT( ST_UNSPENT_PERKS, =1 );
        break;
    case PE_IMPLANT_CHEMCONTROL: //drugs.fos
        break;
	//Achievements
    /*
    case PE_ACHIEV_ZED_KILLED:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    case PE_ACHIEV_KILLGORE_KILLED:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    case PE_ACHIEV_ARESBOSS_KILLED:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    case PE_ACHIEV_ABER_KILLED:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    case PE_ACHIEV_DC_MOTHER_KILLED:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    case PE_ACHIEV_VORPAL_KILLED:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    */
	//Event Buffs
    case PE_AIMBUFF:  // Increase hit chance.
        break;
    case PE_LOOK_BONUS:
        break;
    case PE_BUFF2:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    case PE_BUFF3:
        PERKUP_STAT( ST_MAX_LIFE, += 1 );
        break;
    default:
        break;
    }
}

void PerkDown( Critter& cr, uint perk ) // Export
{
    # define PERKDOWN_STAT    # ( param, val )cr.StatBase[ param ] val
    # define PERKDOWN_SKILL                                                                     \
        # ( param, val )cr.SkillBase[ param ] val; if( cr.SkillBase[ param ] < -MAX_SKILL_VAL ) \
            cr.SkillBase[ param ] = -MAX_SKILL_VAL
    switch( perk )
    {
    // Perks
    case PE_AWARENESS:
        break;
	case PE_ANTICRIT:
		PERKDOWN_STAT( ST_ANTICRIT, -=18 );
        break;
    case PE_BONUS_HTH_ATTACKS:
        break;
    case PE_BONUS_HTH_DAMAGE:
        PERKDOWN_STAT( ST_MELEE_DAMAGE, -= 10 );
        break;
    case PE_BONUS_MOVE:
        PERKDOWN_STAT( ST_MAX_MOVE_AP, -= 2 );
        break;
    case PE_BONUS_RANGED_DAMAGE:
        break;
    case PE_BONUS_RATE_OF_FIRE:
        break;
    case PE_EARLIER_SEQUENCE:
        PERKDOWN_STAT( ST_SEQUENCE, -= 6 );
        break;
    case PE_FASTER_HEALING:
        PERKDOWN_STAT( ST_HEALING_RATE, -= 8 );
        break;
    case PE_MORE_CRITICALS:
        PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 8 );
        break;
	//case PE_MORE_CRITICALS2:
    //    PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 10 );
    //    break;
    case PE_RAD_RESISTANCE:
        PERKDOWN_STAT( ST_RADIATION_RESISTANCE, -= 30 );
        break;
    case PE_TOUGHNESS:
		PERKDOWN_STAT( ST_NORMAL_RESIST,  -= 8 );
		PERKDOWN_STAT( ST_LASER_RESIST,   -= 8 );
		PERKDOWN_STAT( ST_FIRE_RESIST,    -= 8 );
		PERKDOWN_STAT( ST_PLASMA_RESIST,  -= 8 );
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 8 );
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 8 );
        break;
    case PE_STRONG_BACK:
        PERKDOWN_STAT( ST_CARRY_WEIGHT, -= LBS_TO_GRAMM( 50 ) );
        break;
    case PE_SHARPSHOOTER:
        PERKDOWN_STAT( ST_BONUS_LOOK, -= 6 );
        break;
    case PE_SILENT_RUNNING:
        break;
    case PE_SURVIVALIST:
        PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 25 );
        break;
    case PE_MASTER_TRADER:
        break;
    case PE_EDUCATED:
        PERKDOWN_STAT( ST_UNSPENT_SKILL_POINTS, -= 2 );
        break;
    case PE_HEALER:
        break;
    case PE_BETTER_CRITICALS:
        PERKDOWN_STAT( ST_MAX_CRITICAL, -= 20 );
        break;
    case PE_SLAYER:
        break;
    case PE_SNIPER:
        break;
    case PE_SILENT_DEATH:
        break;
    case PE_ACTION_BOY:
        PERKDOWN_STAT( ST_ACTION_POINTS, -= 1 );
        break;
    case PE_LIFEGIVER:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 40 );
        break;
    case PE_DODGER:
        PERKDOWN_STAT( ST_ARMOR_CLASS, -= 40 );
        break;
    case PE_SNAKEATER:
        PERKDOWN_STAT( ST_POISON_RESISTANCE, -= 50 );
        break;
    case PE_MR_FIXIT:
        PERKDOWN_SKILL( SK_REPAIR, -= 20 );
        PERKDOWN_SKILL( SK_SCIENCE, -= 20 );
        break;
    case PE_MEDIC:
        PERKDOWN_SKILL( SK_FIRST_AID, -= 25 );
        PERKDOWN_SKILL( SK_DOCTOR, -= 25 );
        break;
    case PE_MASTER_THIEF:
        PERKDOWN_SKILL( SK_STEAL, -= 20 );
        PERKDOWN_SKILL( SK_LOCKPICK, -= 20 );
        break;
    case PE_SPEAKER:
        PERKDOWN_SKILL( SK_SPEECH, -= 40 );
        break;
//    case PE_HEAVE_HO:
//        break;
    case PE_PICKPOCKET:
        break;
    case PE_GHOST:
        break;
    case PE_EXPLORER:
        break;
    case PE_PATHFINDER:
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 30 );
        break;
    case PE_SCOUT:
        break;
    case PE_RANGER:
        break;
    case PE_QUICK_POCKETS:
        break;
    case PE_SMOOTH_TALKER:
        break;
    case PE_SWIFT_LEARNER:
        break;
    case PE_ADRENALINE_RUSH:
        break;
    case PE_CAUTIOUS_NATURE:
        break;
    case PE_COMPREHENSION:
        break;
    case PE_DEMOLITION_EXPERT:
        break;
    case PE_GAMBLER:
        PERKDOWN_SKILL( SK_GAMBLING, -= 40 );
        break;
    case PE_GAIN_STRENGTH:
        PERKDOWN_STAT( ST_STRENGTH, -=2 );
        break;
    case PE_GAIN_PERCEPTION:
        PERKDOWN_STAT( ST_PERCEPTION, -=2 );
        break;
    case PE_GAIN_ENDURANCE:
        PERKDOWN_STAT( ST_ENDURANCE, -=2 );
        break;
    case PE_GAIN_CHARISMA:
        PERKDOWN_STAT( ST_CHARISMA, -=2 );
        break;
    case PE_GAIN_INTELLIGENCE:
        PERKDOWN_STAT( ST_INTELLECT, -=2 );
        break;
    case PE_GAIN_AGILITY:
        PERKDOWN_STAT( ST_AGILITY, -=2 );
        break;
    case PE_GAIN_LUCK:
        PERKDOWN_STAT( ST_LUCK, -=2 );
        break;
    case PE_HARMLESS:
        PERKDOWN_SKILL( SK_STEAL, -= 40 );
        break;
    case PE_HERE_AND_NOW:
        break;
    case PE_HTH_EVADE:
        break;
    case PE_KAMA_SUTRA_MASTER:
        break;
    case PE_KARMA_BEACON:
        break;
    case PE_LIGHT_STEP:
        break;
    case PE_LIVING_ANATOMY:
        PERKDOWN_SKILL( SK_DOCTOR, -= 20 );
        break;
    case PE_MAGNETIC_PERSONALITY:
        break;
    case PE_NEGOTIATOR:
        PERKDOWN_SKILL( SK_SPEECH, -= 20 );
        PERKDOWN_SKILL( SK_BARTER, -= 20 );
        break;
    case PE_PACK_RAT:
        PERKDOWN_STAT( ST_CARRY_WEIGHT, -= LBS_TO_GRAMM( 50 ) );
        break;
    case PE_PYROMANIAC:
        break;
    case PE_QUICK_RECOVERY:
        break;
    case PE_SALESMAN:
        break;
    case PE_STONEWALL:
        break;
    case PE_THIEF:
        //PERKDOWN_SKILL( SK_SNEAK, -= 10 );
        //PERKDOWN_SKILL( SK_LOCKPICK, -= 10 );
        //PERKDOWN_SKILL( SK_STEAL, -= 10 );
        //PERKDOWN_SKILL( SK_TRAPS, -= 10 );
        break;
    case PE_WEAPON_HANDLING:
        break;
    case PE_TERMINATOR:
        PERKDOWN_STAT( ST_EMP_RESIST, += 1000 );
        break;
	case PE_IMPLANT_ENVIRONMENTAL:
		PERKDOWN_STAT( ST_RADIATION_RESISTANCE, -= 50 );
		PERKDOWN_STAT( ST_POISON_RESISTANCE, -= 40 );
		PERKDOWN_STAT( ST_HEALING_RATE, -= 10 );
        break;
    case PE_IMPLANT_ACCURACY:
		PERKDOWN_STAT( ST_BONUS_LOOK, -= 5 );
		PERKDOWN_SKILL( SK_BIG_GUNS, -= 40 );
		PERKDOWN_SKILL( SK_SMALL_GUNS, -= 40 );
		PERKDOWN_SKILL( SK_ENERGY_WEAPONS, -= 40 );
        break;
    case PE_IMPLANT_DEFENCE:
		PERKDOWN_STAT( ST_NORMAL_RESIST,  -= 4 );
		PERKDOWN_STAT( ST_LASER_RESIST,   -= 4 );
		PERKDOWN_STAT( ST_FIRE_RESIST,    -= 4 );
		PERKDOWN_STAT( ST_PLASMA_RESIST,  -= 4 );
		PERKDOWN_STAT( ST_EXPLODE_RESIST, -= 4 );
		PERKDOWN_STAT( ST_ELECTRO_RESIST, -= 4 );
		PERKDOWN_STAT( ST_NORMAL_ABSORB,  -= 2 );
		PERKDOWN_STAT( ST_LASER_ABSORB,   -= 2 );
		PERKDOWN_STAT( ST_FIRE_ABSORB,    -= 2 );
		PERKDOWN_STAT( ST_PLASMA_ABSORB,  -= 2 );
		PERKDOWN_STAT( ST_EXPLODE_ABSORB, -= 2 );
		PERKDOWN_STAT( ST_ELECTRO_ABSORB, -= 2 );
        break;
    case PE_IMPLANT_MEDIC:
		PERKDOWN_SKILL( SK_FIRST_AID, -= 50 );
		PERKDOWN_SKILL( SK_DOCTOR, -= 50 );
		cr.PerkBase[PE_LIVING_ANATOMY] = 0;
        break;
    case PE_IMPLANT_ENGINEER:
		PERKDOWN_SKILL( SK_REPAIR, -= 100 );
		PERKDOWN_SKILL( SK_SCIENCE, -= 100 );
		PERKDOWN_SKILL( SK_ENERGY_WEAPONS, -= 100 );
        break;
    case PE_IMPLANT_SPEED:
		PERKDOWN_STAT( ST_ACTION_POINTS, -= 1 );
		PERKDOWN_STAT( ST_SEQUENCE, -= 6 );
        CrSpeedCalc( cr );
        break;
    case PE_IMPLANT_SURVIVOR:
		PERKDOWN_SKILL( SK_OUTDOORSMAN, -= 100 );
		PERKDOWN_STAT( ST_MAX_LIFE, -= 30 );
        break;
    case PE_IMPLANT_MARKSMAN:
		PERKDOWN_STAT( ST_CRITICAL_CHANCE, -= 4 );
		PERKDOWN_STAT( ST_BONUS_LOOK, -= 2 );
        break;
    case PE_IMPLANT_SCOUT:
		PERKDOWN_SKILL( SK_SNEAK, -= 50 );
		PERKDOWN_STAT( ST_ARMOR_CLASS, -= 30 );
        break;
    case PE_IMPLANT_ENCHACEMENT:
		PERKDOWN_STAT( ST_UNSPENT_PERKS, =0 );
        break;
    case PE_IMPLANT_CHEMCONTROL:
        break;
	// Achievements
    /*
    case PE_ACHIEV_ZED_KILLED:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    case PE_ACHIEV_KILLGORE_KILLED:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    case PE_ACHIEV_ARESBOSS_KILLED:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    case PE_ACHIEV_ABER_KILLED:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    case PE_ACHIEV_DC_MOTHER_KILLED:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    case PE_ACHIEV_VORPAL_KILLED:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    */
	// Event Buffs
    case PE_AIMBUFF: // Increase hit chance.
        break;
    case PE_LOOK_BONUS:
        break;
    case PE_BUFF2:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    case PE_BUFF3:
        PERKDOWN_STAT( ST_MAX_LIFE, -= 1 );
        break;
    default:
        break;
    }
}
#endif
